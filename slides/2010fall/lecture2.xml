<?xml version="1.0"?>
<!DOCTYPE ipe SYSTEM "ipe.dtd">
<ipe version="70206" creator="ipetoipe 7.2.7">
<info created="D:20100118121208" modified="D:20101028143918" title="CS101 Lecture 2" author="Otfried Cheong"/>
<bitmap id="1" width="151" height="154" length="1244" ColorSpace="DeviceRGB" Filter="FlateDecode" BitsPerComponent="8" encoding="base64">
eNrt3L1rYkscxvGDiI1FQHwhlYJap9HaW4nphCAIQfIHBLSIjQi6hd0tFIK1aVJFW+U2FtrZ
uoUIGlDBwkZ8ARXUO7th3WRf7vpyNY75PkzhWdjzO5lPZpw5y85yud/8rSiv23Y3qVary/fL
R64OIoh0I4gggkh1EEGkG0EEEcSTrJ5MJs1ms0qlMhqNwWBwOp2CKFf1SqWi1WrL5fJsNhN3
M5lMmUwGRLmqt1qtYrEoPiwWi0ajIYZkLpcDUcbqw+FQrVYriuLz+YQmiJJWF3bibmIkiq/I
XRCrZA/5b4J6vV6r1VaXsVjM7XYzEuWqnkgkLi8vV5fhcPjq6gpEuaqLO2g0GrGYGY/HpVJJ
p9Nls1kQpav++PhotVrFPtFisaTTaTb7vLGhG0EEEUSqgwgiiCCCCCKIIIIIIogggggiiCCC
CCLdCCKIIFIdRBDpRhBBBJHqIIJIN4IIIohUBxFEuhFEEEGkOogg0o0ggggi1UGUonq5XHY4
HGq1WqfThUKhyWQColzV+/3+2dlZIpEYj8fibna7PRqNgihX9UKhoNfrVwcQpVIpp9MJolzV
R6NRu91++Swo/X5/IBAAUdLqzWbT5/PZbLZOp7MLIqc/Hf5EKRGxkolEIgaDIRaLDQYDVqfS
VZ/P5x6Px+v19no9thiSVs/n80ajsV6vP39Lt9sFUa7q8XhceRuXywUib2zoRhBBBJHqIIII
IogggggiiCCCCCKIIIIIIogggkg3gvjLZzi9BiKIR4548nwggggiiO+CyOoURBBB/AiIyoa5
vr4G8agQX1w+ffqr0VBEE3/w+/bPcvks2vXXgHhUiOsJvnEUf2v50kA8JsQ1BL87gnj8iGK2
/ML0xQtEWRF/L/gKke9EEEHcP+Kfp1MQT2BhAyKIIB7JFgPE9fL09HRzcwOipIifP3++v78/
Pz8/DOLGb2yYTtfIw8PD7e3txcXFvhG3eHcK4ka5u7vbK+Jy83/FUNZAAXEfiH88HOn1l+NX
ptVW8fsUuv5RSx/kPKvjGYmr8biaTn9CXGtbwUg8TsRXr25AlBLx7XtUEOVDfLuMAfGo39is
t+t/BlEWxN13FiC+L+Ivh6Sybf+DCCKIIIII4ukhbre2AfF4EH/YaIAoHeJPjiDKhLj7VhHE
90X8X34QEEEEEUQQQTxaRNoJnJ5BA5EGIog4fmREQgghhBBCCCGEEEIIIYSQU83W51ntmHK5
7HA41Gq1TqcLhUKTyeSQ1ZPJpNlsVqlURqMxGAxOp1NJ+XY8z2qX9Pv9s7OzRCIxHo+r1ard
bo9GowerXqlUtFqt+C2azWaiuslkymQykiLueJ7VLikUCnq9frFYvFymUimn03mw6q1Wq1gs
ig/iARqNhhiSuVxO6ul062MfdsloNGq32y+fRU/6/f5AIHDgZxgOh2IyVxTF5/Otfp1A3CLN
ZlP0oc1m63Q6h68u7MR0Kkai+IoEcYuIlUwkEjEYDLFYbDAYHLJ0vV6v1WqrS/EAbrcbxE0z
n889Ho/X6+31eof/kcWC6vLycnUZDoevrq5A3DT5fF6s7cWIeP6Wbrd7sOpiCtVoNGIxI9bG
pVJJ7HGy2SyImyYej//wnyJdLtchH+Dx8dFqtYp9osViSafTvC4ghBBCCCGEEEIIkSj/Au4i
iA4=
</bitmap>
<bitmap id="2" width="411" height="81" length="1058" ColorSpace="DeviceRGB" Filter="FlateDecode" BitsPerComponent="8" encoding="base64">
eNrt28tx4kAURmFymZ1ZEgsrQpgkiGCi8GwchYJwPoyQbGiEMA+P722h75TKZVS2j/qhX92t
9m63WywWf19eDkf7cXc/TdPsMuDl5Z2V92penf9A80np/fpMU3D7b33/zPkFRNrjz6hn9Tzz
en4g0DxZeHl5n2aEtgOAKhFoAAQaAMwz0Mz9eXl5A7wCjZeXV6BpCF5e3nkGGgAEINAACDQA
mGegmfvz8vIGeAUaLy+vQNMQvLy88ww0AAhAoAEQaAAwxUAbYO7Py8tbp/dqXnkpwMvLO6FA
85aTl5dXoAFAVQg0AAINAOYZaOb+vLy8AV6BxsvLK9A0BC8v7zwDDQAuRdBdbDYbgQag2jRb
rVabju1lXl9fm47+JwUagAoD7ZY0G2TaPoX6IynQzP15eXm/CLTtbfSZJtB4eXmnEmjtx/Z8
m10CjZeXd+qBdinNTgLt8h+0hgYgBYEG4OkD7fqUU6ABmEKg3fRSIDXQrDnw8vIKNB2Al1eg
jb/lFGi8vLwCzRoagJ8MtLv/UyB1ygkAo/nzwP9y/t9Aaz4pR6TOOOOMM3edKTPtLs5nxIe/
bA2Nl5c33VsuprXfH772Y7OWG5NHoPHy8tYQaIcp5yDQ+kyrIdB+/fntcDgco8fVQOupJ9AA
4LERWvm9QAMw3UArEWgAJhdol3bYeinAy8s7Le8DuzUEGi8vb+Xewf6NB35doPHy8go0ABBo
ACDQAMwq0O59L2ANjZeXtx7vpf0bN+7cEGi8vLwVBtog0wQaLy/vFAPtO1vRrKEBeBoeCDQA
qJZ7A638+HNHmIiXl/dZvQKNl5dXoGkIXl5egaYheHl5IwMNACaKN78AAAAAgAnxtm7nsuu3
aOMHkeL37TJDe1rsSHNZ0Yvl9j2hpsOsReOGt3FRzzk3UmTbXsqNYwNk3FzDi4i7hl7Z+7o6
iWqMY56EaodVHdjanTK+rx+1KRV92sUibf13of25k8W383ludGcOlZARsHkDpdFGed4OP6js
nEdHSp5lPqSDh2d9eSPVZTXHVvlYbhRXkNf+7YW115PU7TNvufhJ9r6g623GnZY0/8qbdcQ/
Iw8FDu3OJ+UMrfOx3CgvILkDJAZa/KJSUnW3zrbrBdd00eMjb/L+Ab1eL3OG/jlj/s9nR6R4
2L7BpT7pzScfkhYa0gMtJc4yev3etpdlPzpiCvyxvNIVM2m0lHZnBz8sDytZy+VSoOUGWuz6
afoN3lXvPAItdfaRm2d5s60ErylnHYOz6A5wvpsgo+Dhc86cvp3Rl2sItIx1+JFAy34pkNUJ
Mmb8p2PCnH6XvIYWJj4mWvSAKXE/Tnx5B9s2cuZYVW3byAm08yFLxvvmjBoPf3QUVR1c3qQd
n1mrN8eOFb9gmNWdz3tzws4kAAAAAAAAYFb8A+AnZAM=
</bitmap>
<bitmap id="3" width="213" height="162" length="1529" ColorSpace="DeviceRGB" Filter="FlateDecode" BitsPerComponent="8" encoding="base64">
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
ERERERERERER0VfuXxMD1AE=
</bitmap>
<bitmap id="4" width="58" height="50" length="865" ColorSpace="DeviceRGB" Filter="FlateDecode" BitsPerComponent="8" ColorKey="fbfbfd" encoding="base64">
eNrtmE1LG0EYx+NrXBQtoXhQFJEYYnxpXEMrEQIJsgkSSihFog095OBFwZ5VqEe9ikggNyOi
HqyoiO03CEHEg4iICC099DNIa//JtNNhNptskgkmdB/+hNnMDPnx5HmZ2YeHnw+GqlzfTB8g
dlD5tFTV4t6qcCw3qHzUqvj3DdT/GfWpZCrQFuQFsrHvrw0PvxocdPfps9JRlecKGKD1qXUt
HX88TiVSEJZFX7z1+/0NGWtsbGxqapIkCZ9msxmPDdrmdDpLAdaJygGD7Wt9/XezGcxzc3Mr
+WxtbW0/Y263e2hoqGhgSpsXlQXGrl8Zzc/PnwUCjyZTyuVSQ+7MzGDqrrcX49XV1b29vVgs
JpwWj/geYFq0ad/W1f1obv6sKOAhOpdlFnU3HKZT9z095aPVQqW0NTU1nZ2d09PTRdC2trZ6
vd7igIujxQJCC6pCIwF7BwYGxNLmjgTiW3riyptldCVoURnE0ubNMsQtaAOBALJsRZ+VL251
0pJIqAraT5Lk8USJb08nJ2lCcbq1WiuB9osk6Y8E4d2hoF5WW1tLOm9/f3/eXgbURCKxvLws
pPMWcU4ALX4UwAUdh0ZGRkQdbPQbdaxO3xL3Et+2tbX5fL4SgbkAxph+Eq9CeCQrfV4fDloI
v8i7SPqccBZIJl/mQN3aen9/n+5liIeNjY3x8XGHw1G6h2kkcLQEmNLKsswV29PTyVTKlRV1
eztyd9fLloV4PA5Um80mnJYYR6soCp1CjhOSk5Pg+bnMd96dmdvbPxUsGo3SXeXwLTtmaUly
LS0twVeUFnZ09PriwvnvVLMbvrmx0UfQjo2NJZNJhD2iXSwta2pa5Is/Yywt7PAwdHk5jMH+
/tT1tZ2dAi1qwujoqMViKTEMcrcJLsvIjYxgq2vCwcGbx0fT1ZVDXROEVDD9dYzbQpxst9sB
HAwGs17ErFYrUBcXFzFuaZG7u0PIMLFXYLaU5V4MYEo7MTHBXW89Hg+ldblcQrwqkJabNWgN
2iehhXKsJMcwdZbRWTWtcGCW1tJsyVq7aPlSVzBy+6azbAUr/XyrVXjZ7tD+rD0rbUdHB/dm
KRQKUdqurq7Z2Vn27rC5uSmcVg2sRZu1HXC+FfvWTmd304rbHO88y/FG1JAhQ4YqWb8B0wZT
mQ==
</bitmap>
<bitmap id="5" width="411" height="81" length="1206" ColorSpace="DeviceRGB" Filter="FlateDecode" BitsPerComponent="8" encoding="base64">
eNrt3U1y4jAURWHWE4ZZC6MMeivsJJP0JKtgEb0f2uAEjM1vgt+T5e8U1RUoOhc/SceSMGS7
3S4Wi78vL4dbc3f7OJvNZpuBXLlyZ5V701fDJ2y+6eZef2TT4f7/9ftHhi8gMj3+EXVW55nX
+QdCc2aRK1duNTO0LQAUCaEBIDQAmKfQrP3lypUbkEtocuXKJTQNIVeu3HkKDQACIDQAhAYA
8xSatb9cuXIDcglNrly5hKYh5MqVO0+hAUAAhAaA0ABgikLrYe0vV67cMnNv+sqbAnLlyp2Q
0LzLKVeuXEIDgKIgNACEBgDzFJq1v1y5cgNyCU2uXLmEpiHkypVbsdAWD/L29mbJD+CJPEto
raNeX1/f9qwv8/Hx0f7d9vaZmgBAgUK7x2Y9p+1+W3sDgPKEtr6P1mljCy147f/n/b13s9eh
znIjc0cVWnO3ebxxV/VCGw6xlOFWfYdXZ7mJQrtksxOhTbwhrg+x4OFWcYdXZ7mElrv2SV8Z
VYM6oxCh3V5y1jLKfvk0qDMKF9pdbwpMf6A9/clQZxBa5Nr/ymTg7Pdkxkwe6ttjUWe5ExPa
mE4LGGjDIXbpi8oNNHWWS2gFNsT1acDNgTbeWKusw6uz3HShPfxJgep2da78KRk7POqMUcn9
LCehQZ2RK7TNN2c72EMMZ5i931zmI78faFM5UnX2yLQeefr3oXU305qfD/+2c7OGyFnZ2Hs7
pc0cat1DU2e5wUvO7vMPS86e0Fqn1SQ0m9XqTCwzFFpLNUK7PgdwOYE6y61YaN2fg4U2HmVe
8Fkf6oyihNalJqFtfSRHnTEPoV26wjb+TYGwyYMPTaszahXao1drTHftX9rX2tS6x6LOcrOE
dnaqljUr88WD6qzOhEZozx1uOp46yyW0qe/22MlRZwRDaAAI7VGhZb0vAIDQniu03sUbYUKz
5yBX7qxyA4TWcxqhyZUrd4pCS78UTQeQK5fQniI0AAjmB0IDgGJ5VGjdu+PdwoLkypVbay6h
yZUrl9A0hFy5cglNQ8iVKzdSaAAwUbzzCwAAAACYEJ+rZi27+oxO/CIy+N96mRF7etiRyd1C
L5brfwmVDkvtNG54G3fqnDOQItv2kjeODZAxuPovIu41tJFt3r4mUY1x9ElobL/Uga29j4zv
68fYlEKfdrHItPan0P68D4tv56E39o8cipAh2LyJ0tlGqbfD94qdc+pI8VnmSTp4etYeb2R0
t8yxJT/njc4ryGv/5oU1ryep22cOufhF9u5AV+uMkZa0/spbdcSfIw8HHNqdT44ztObnvNF9
AckdIFFo8ZtKSeVuMpuuF1zpTo+PHOTtCXq1WuZM/XPm/N/njsjgfvsGH/VJbz65k7TRkC60
FJ1l9Ppd2i4s+9QRc8Bf2yv7w0yaLaWN7OCT5WEna7lcElqu0GL3T9MH+L688xBa6uoj12d5
q62EXEvOMiZn0R1geDVBxoGHrzlz+nZGXy5BaBn78GeElv2mQFYnyFjxn84Jc/pd8h5aWPDR
aNETpsTrceKPt3fZRs4aq6jLNnKENpyyZLzfnFHx8FNHp9TBx5t0xWfW7s2xY8VvGGZ152Fv
TrgyCQAAAAAAAJgV/wHxhpW+
</bitmap>
<ipestyle name="presentation">
<symbol name="arrow/arc(spx)">
<path stroke="sym-stroke" fill="sym-stroke" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/farc(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="mark/circle(sx)" transformations="translations">
<path fill="sym-stroke">
0.6 0 0 0.6 0 0 e
0.4 0 0 0.4 0 0 e
</path>
</symbol>
<symbol name="mark/disk(sx)" transformations="translations">
<path fill="sym-stroke">
0.6 0 0 0.6 0 0 e
</path>
</symbol>
<symbol name="mark/fdisk(sfx)" transformations="translations">
<group>
<path fill="sym-stroke" fillrule="eofill">
0.6 0 0 0.6 0 0 e
0.4 0 0 0.4 0 0 e
</path>
<path fill="sym-fill">
0.4 0 0 0.4 0 0 e
</path>
</group>
</symbol>
<symbol name="mark/box(sx)" transformations="translations">
<path fill="sym-stroke" fillrule="eofill">
-0.6 -0.6 m
0.6 -0.6 l
0.6 0.6 l
-0.6 0.6 l
h
-0.4 -0.4 m
0.4 -0.4 l
0.4 0.4 l
-0.4 0.4 l
h
</path>
</symbol>
<symbol name="mark/square(sx)" transformations="translations">
<path fill="sym-stroke">
-0.6 -0.6 m
0.6 -0.6 l
0.6 0.6 l
-0.6 0.6 l
h
</path>
</symbol>
<symbol name="mark/fsquare(sfx)" transformations="translations">
<group>
<path fill="sym-stroke" fillrule="eofill">
-0.6 -0.6 m
0.6 -0.6 l
0.6 0.6 l
-0.6 0.6 l
h
-0.4 -0.4 m
0.4 -0.4 l
0.4 0.4 l
-0.4 0.4 l
h
</path>
<path fill="sym-fill">
-0.4 -0.4 m
0.4 -0.4 l
0.4 0.4 l
-0.4 0.4 l
h
</path>
</group>
</symbol>
<symbol name="mark/cross(sx)" transformations="translations">
<group>
<path fill="sym-stroke">
-0.43 -0.57 m
0.57 0.43 l
0.43 0.57 l
-0.57 -0.43 l
h
</path>
<path fill="sym-stroke">
-0.43 0.57 m
0.57 -0.43 l
0.43 -0.57 l
-0.57 0.43 l
h
</path>
</group>
</symbol>
<symbol name="arrow/fnormal(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/pointed(spx)">
<path stroke="sym-stroke" fill="sym-stroke" pen="sym-pen">
0 0 m
-1 0.333 l
-0.8 0 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/fpointed(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-0.8 0 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/linear(spx)">
<path stroke="sym-stroke" pen="sym-pen">
-1 0.333 m
0 0 l
-1 -0.333 l
</path>
</symbol>
<symbol name="arrow/fdouble(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
-1 0 m
-2 0.333 l
-2 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/double(spx)">
<path stroke="sym-stroke" fill="sym-stroke" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
-1 0 m
-2 0.333 l
-2 -0.333 l
h
</path>
</symbol>
<pen name="normal" value="1.2"/>
<pen name="heavier" value="2.4"/>
<pen name="fat" value="3.6"/>
<pen name="ultrafat" value="6"/>
<symbolsize name="normal" value="9"/>
<symbolsize name="large" value="15"/>
<symbolsize name="small" value="6"/>
<symbolsize name="tiny" value="3.3"/>
<arrowsize name="normal" value="15"/>
<arrowsize name="large" value="20"/>
<arrowsize name="small" value="10"/>
<arrowsize name="tiny" value="6"/>
<color name="red" value="1 0 0"/>
<color name="green" value="0 1 0"/>
<color name="blue" value="0 0 1"/>
<color name="yellow" value="1 1 0"/>
<color name="orange" value="1 0.647 0"/>
<color name="gold" value="1 0.843 0"/>
<color name="purple" value="0.627 0.125 0.941"/>
<color name="gray" value="0.745"/>
<color name="brown" value="0.647 0.165 0.165"/>
<color name="navy" value="0 0 0.502"/>
<color name="pink" value="1 0.753 0.796"/>
<color name="seagreen" value="0.18 0.545 0.341"/>
<color name="turquoise" value="0.251 0.878 0.816"/>
<color name="violet" value="0.933 0.51 0.933"/>
<color name="darkblue" value="0 0 0.545"/>
<color name="darkcyan" value="0 0.545 0.545"/>
<color name="darkgray" value="0.663"/>
<color name="darkgreen" value="0 0.392 0"/>
<color name="darkmagenta" value="0.545 0 0.545"/>
<color name="darkorange" value="1 0.549 0"/>
<color name="darkred" value="0.545 0 0"/>
<color name="lightblue" value="0.678 0.847 0.902"/>
<color name="lightcyan" value="0.878 1 1"/>
<color name="lightgray" value="0.827"/>
<color name="lightgreen" value="0.565 0.933 0.565"/>
<color name="lightyellow" value="1 1 0.878"/>
<color name="title" value="0.4 0 0.4"/>
<dashstyle name="dashed" value="[4] 0"/>
<dashstyle name="dotted" value="[1 3] 0"/>
<dashstyle name="dash dotted" value="[4 2 1 2] 0"/>
<dashstyle name="dash dot dotted" value="[4 2 1 2 1 2] 0"/>
<textsize name="normal" value="\normalsize"/>
<textsize name="large" value="\large"/>
<textsize name="small" value="\normalsize"/>
<textsize name="huge" value="\LARGE"/>
<textstretch name="normal" value="2.8"/>
<textstretch name="large" value="2.8"/>
<textstretch name="small" value="2.4"/>
<textstretch name="huge" value="2.8"/>
<textstyle name="normal" begin="\begin{flushleft}" end="\end{flushleft}"/>
<textstyle name="center" begin="\begin{center}" end="\end{center}"/>
<textstyle name="itemize" begin="\begin{flushleft}\begin{itemize}" end="\end{itemize}\end{flushleft}"/>
<textstyle name="item" begin="\begin{flushleft}\begin{itemize}\item{}" end="\end{itemize}\end{flushleft}"/>
<gridsize name="16 pts (~6 mm)" value="16"/>
<gridsize name="32 pts (~12 mm)" value="32"/>
<gridsize name="10 pts (~3.5 mm)" value="10"/>
<gridsize name="20 pts (~7 mm)" value="20"/>
<gridsize name="14 pts (~5 mm)" value="14"/>
<gridsize name="28 pts (~10 mm)" value="28"/>
<gridsize name="56 pts (~20 mm)" value="56"/>
<anglesize name="90 deg" value="90"/>
<anglesize name="60 deg" value="60"/>
<anglesize name="45 deg" value="45"/>
<anglesize name="30 deg" value="30"/>
<anglesize name="22.5 deg" value="22.5"/>
<preamble>
\renewcommand\rmdefault{cmss}
\makeatletter
\leftmargini 1.5em
\leftmargin \leftmargini
\leftmarginii  1.2em
\leftmarginiii 1em
\def\@listI{\leftmargin\leftmargini
            \parsep \z@
	    \partopsep 3pt
	    \topsep \z@
            \itemsep \z@}
\@listI
\def\@listii {\leftmargin\leftmarginii
              \labelwidth\leftmarginii
              \advance\labelwidth-\labelsep
              \topsep    \z@
              \parsep    \z@
              \itemsep   \parsep}
\def\@listiii{\leftmargin\leftmarginiii
              \labelwidth\leftmarginiii
              \advance\labelwidth-\labelsep
              \topsep    \z@
              \parsep    \z@
              \partopsep \z@
              \itemsep   \topsep}
\makeatother
</preamble>
<layout paper="800 600" origin="32 0" frame="736 528" skip="32" crop="no"/>
<titlestyle pos="368 554" size="large" color="title"  halign="center" valign="baseline"/>
<tiling name="falling" angle="-60" step="12" width="3"/>
<tiling name="rising" angle="30" step="12" width="3"/>
</ipestyle>
<ipestyle name="kaisttheme">
<symbol name="Background">
<group>
<image matrix="1 0 0 1 -162.234 308.933" rect="339.004 239.003 396.996 288.997" bitmap="4"/>
<group matrix="0.343668 0 0 0.343668 -51.9093 459.634">
<path fill="0.563 0.727 0.855" fillrule="wind">
76.697 277.771 m
120.493 269.94
192.854 264.827
274.709 264.827 c
356.564 264.827
428.927 269.94
472.718 277.771 c
428.927 285.601
356.564 290.72
274.709 290.72 c
192.854 290.72
120.493 285.601
76.697 277.771 c
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
275.279 299.355 m
294.577 299.355 l
294.577 373.497 l
275.279 373.497 l
275.279 299.355 l
h
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
418.065 373.465 m
361.604 373.465 l
361.669 357.398 l
380.069 357.398 l
380.069 299.214 l
399.603 299.279 l
399.603 357.398 l
418.065 357.398 l
418.065 373.465 l
h
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
249.098 374.512 m
241.957 374.512 l
229.799 374.512 l
222.663 374.512 l
200.923 313.64 l
182.964 337.545 l
209.964 373.497 l
190.668 373.497 l
169.085 344.764 l
169.085 373.497 l
149.792 373.497 l
149.792 299.355 l
169.085 299.355 l
169.085 330.332 l
192.384 299.326 l
195.813 299.326 l
211.677 299.326 l
215.107 299.326 l
235.337 355.983 l
247.498 315.289 l
229.329 315.289 l
229.329 299.226 l
259.475 299.226 l
259.475 299.326 l
271.567 299.326 l
249.098 374.512 l
h
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
341.955 345.908 m
341.927 345.95 l
319.143 345.95 l
319.143 357.493 l
357.066 357.493 l
357.066 373.56 l
323.335 373.56 l
323.318 373.532 l
311.282 373.532
301.522 363.769
301.522 351.728 c
301.522 339.879
310.971 330.261
322.742 329.946 c
322.76 329.887 l
347.43 329.887 l
347.43 315.289 l
303.776 315.289 l
303.776 299.226 l
342.373 299.226 l
342.399 299.261 l
354.979 299.635
365.065 309.921
365.065 322.573 c
365.065 335.392
354.739 345.781
341.955 345.908 c
</path>
</group>
<text transformations="translations" pos="100 588" stroke="kaist-dark-blue" type="label" valign="top">
CS101</text>
<path stroke="kaist-dark-blue" pen="fat">
0 536 m
736 536 l
</path>
</group>
</symbol>
<color name="kaist-dark-blue" value="0.065 0.155 0.563"/>
<color name="dred" value="0.7 0 0"/>
<layout paper="800 600" origin="32 0" frame="736 528" skip="32" crop="no"/>
<titlestyle pos="736 554" size="large" color="title"  halign="right" valign="baseline"/>
</ipestyle>
<ipestyle name="cs101style">
<preamble>
\newcommand{\dred}[1]{\textcolor{dred}{#1}}
\usepackage{fancyvrb}
\DefineShortVerb[formatcom=\color{darkred}]{\|}
\CustomVerbatimEnvironment{V}{Verbatim}{formatcom=\color{black},commandchars=\\\@\$}
\def\r{$\rightarrow$}
</preamble>
</ipestyle>
<page title="Conditionals" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<layer name="epsilon"/>
<layer name="zeta"/>
<layer name="eta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<view layers="alpha beta gamma delta" active="delta"/>
<view layers="alpha beta gamma delta epsilon" active="epsilon"/>
<view layers="alpha beta gamma delta epsilon zeta" active="zeta"/>
<view layers="alpha beta gamma delta epsilon zeta eta" active="eta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">So far, our programs performed exactly the same steps every time the program is run.</text>
<text layer="beta" pin="h" transformations="translations" pos="0 437.729" stroke="darkblue" type="minipage" width="736" valign="top">Often, what the robot does must depend on the environment:

\begin{V}
\dred@if$ \textit@it rains$:
  listen_to_cs101_lecture()
\dred@else$:
  eat_strawberries_in_the_sun()
\end{V}
</text>
<text layer="gamma" matrix="1 0 0 1 29.5288 49.6335" transformations="translations" pos="548.628 308.482" stroke="darkred" type="label" valign="baseline">condition</text>
<path stroke="darkred" arrow="normal/normal">
568.733 366.283 m
479.518 368.168
423.602 392.67
279.099 391.414
211.246 383.246 s
</path>
<text layer="delta" matrix="1 0 0 1 148.901 0.628272" transformations="translations" pos="269.047 219.895" stroke="darkred" type="label" valign="baseline">if condition is true, do this</text>
<path stroke="darkred" arrow="normal/normal">
579.414 245.026 m
566.848 304.712
542.974 337.382
477.005 354.974
406.01 351.204 s
</path>
<text layer="epsilon" matrix="1 0 0 1 -275.183 -14.4503" transformations="translations" pos="313.654 161.466" stroke="darkred" type="label" valign="baseline">if condition is false, do that</text>
<path stroke="darkred" arrow="normal/normal">
366.429 157.696 m
397.215 187.225
365.801 225.55
267.162 261.361 s
</path>
<text layer="zeta" transformations="translations" pos="29.0471 87.3298" stroke="darkred" type="label" valign="baseline">Note the indentation!</text>
<path stroke="darkred" arrow="normal/normal">
21.5079 99.267 m
-6.13613 117.487
3.28796 209.215
8.31414 287.12 s
</path>
<text layer="eta" pin="h" transformations="translations" pos="0 35.9594" stroke="darkblue" type="minipage" width="736" valign="top">A \dred{condition} is something that is either |True| or |False|.</text>
</page>
<page title="Silly examples" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
if \dred@True$:
  print &quot;CS101 is my favorite course&quot;
\end{V}
</text>
<text layer="beta" pin="h" transformations="translations" pos="0 430.911" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
if \dred@False$:
  print &quot;Every CS101 student will receive an A+&quot;
\end{V}
</text>
<text layer="gamma" pin="h" transformations="translations" pos="0 333.822" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
if \dred@3 &lt; 5$:
  print &quot;3 is less than 5&quot;
else:
  print &quot;3 is larger than 5&quot;
\end{V}
</text>
</page>
<page title="Sensing beepers" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<layer name="epsilon"/>
<layer name="zeta"/>
<view layers="alpha gamma" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta delta" active="delta"/>
<view layers="alpha beta delta epsilon" active="epsilon"/>
<view layers="alpha beta delta epsilon zeta" active="zeta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">We want the robot to make 9 steps and pick up all beepers on the way.</text>
<image layer="gamma" matrix="1.7592 0 0 1.7592 -279.386 -75.8432" rect="213.894 233.629 522.106 294.371" bitmap="5"/>
<image layer="beta" matrix="1.76109 0 0 1.76109 -279.79 -76.3992" rect="213.894 233.629 522.106 294.371" bitmap="2"/>
<text layer="delta" matrix="1 0 0 1 0 -128.168" pin="h" transformations="translations" pos="0 437.729" stroke="darkblue" type="minipage" width="736" valign="top">|hubo.pick_beeper()| causes an error if there is no beeper.</text>
<text layer="epsilon" pin="h" transformations="translations" pos="0 251.992" stroke="darkblue" type="minipage" width="736" valign="top">Repeat the following 9 times:
\begin{itemize}
\item Take a step forward.
\item Check if there is a beeper.
\item If yes, pick it up.
\end{itemize}</text>
<text layer="zeta" transformations="translations" pos="368 256" stroke="darkblue" type="minipage" width="368" valign="top">\begin{V}
def move_and_pick():
  hubo.move()
  if hubo.on_beeper():
    hubo.pick_beeper()

for i in range(9):
  move_and_pick()
\end{V}</text>
</page>
<page title="not true is false">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<view layers="alpha beta gamma delta" active="delta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Let&apos;s do the opposite: we want to drop a beeper, but only if there is \dred{no} beeper at the current location.</text>
<text layer="beta" pin="h" transformations="translations" pos="0 437.729" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
if \dred@not$ hubo.on_beeper():
  hubo.drop_beeper()
\end{V}</text>
<text layer="gamma" pin="h" transformations="translations" pos="0 338.316" stroke="darkblue" type="minipage" width="736" valign="top">The keyword |not| inverts the sense of the condition: |not| true is false, and |not| false is true.</text>
<text layer="delta" pin="h" transformations="translations" pos="0 249.983" stroke="darkblue" type="minipage" width="736" valign="top">What is the output?

\begin{V}
print not 3 &lt; 5
\end{V}
</text>
</page>
<page title="What else?" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Let&apos;s try to follow the boundary of the world: We move forward if there is no wall, otherwise turn to the left.</text>
<text layer="beta" pin="h" transformations="translations" pos="0 439.667" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
def move_or_turn():
  if hubo.front_is_clear():
    hubo.move()
  else:
    hubo.turn_left()

for i in range(20):
  move_or_turn()
\end{V}
</text>
</page>
<page title="With singing and dancing\ldots" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="gamma" active="gamma"/>
<view layers="delta" active="delta"/>
<text layer="alpha" matrix="1 0 0 1 0 88.1675" pin="h" transformations="translations" pos="0 439.667" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
def dance():
  for i in range(4):
    hubo.turn_left()

def move_or_turn():
  if hubo.front_is_clear():
    dance()
    hubo.move()
  else:
    hubo.turn_left()
    hubo.drop_beeper()

for i in range(18):
  move_or_turn()
\end{V}
</text>
<text layer="beta" matrix="1 0 0 1 107.435 38.9529" transformations="translations" pos="354.492 246.283" stroke="darkred" type="label" valign="baseline">Note the indentation!</text>
<path stroke="darkred">
48 336 m
48 272 l
</path>
<path stroke="darkred">
48 224 m
48 160 l
</path>
<text layer="gamma" matrix="1 0 0 1 0 88.1675" pin="h" transformations="translations" pos="0 439.667" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
def dance():
  for i in range(4):
    hubo.turn_left()

def move_or_turn():
  if hubo.front_is_clear():
    dance()
    hubo.move()
  else:
    hubo.turn_left()
  \dred@hubo.drop_beeper()$

for i in range(18):
  move_or_turn()
\end{V}
</text>
<text transformations="translations" pos="432 192" stroke="darkred" type="label" valign="baseline">What happens now?</text>
<text layer="delta" matrix="1 0 0 1 0 88.1675" pin="h" transformations="translations" pos="0 439.667" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
def dance():
  for i in range(4):
    hubo.turn_left()

def move_or_turn():
  if hubo.front_is_clear():
    dance()
    hubo.move()
  else:
    hubo.turn_left()
\dred@hubo.drop_beeper()$

for i in range(18):
  move_or_turn()
\end{V}
</text>
<text transformations="translations" pos="464 192" stroke="darkred" type="label" valign="baseline">\ldots and now?</text>
</page>
<page title="Many choices!" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="gamma" active="gamma"/>
<view layers="gamma delta" active="delta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkred" type="minipage" width="736" valign="top">\begin{V}
if hubo.on_beeper():
  hubo.pick_beeper()
else:
  if hubo.front_is_clear():
    hubo.move()
  else:
    if hubo.left_is_clear():
      hubo.turn_left()
    else:
      if hubo.right_is_clear():
        turn_right()
      else:
        turn_around()
\end{V}
</text>
<text layer="beta" matrix="1 0 0 1 -48 16" transformations="translations" pos="480 352" stroke="darkred" type="label" valign="baseline">This is not very readable!</text>
<text layer="gamma" pin="h" transformations="translations" pos="0 528" stroke="darkred" type="minipage" width="736" valign="top">\begin{V}
if hubo.on_beeper():
  hubo.pick_beeper()
\dred@elif$ hubo.front_is_clear():
  hubo.move()
\dred@elif$ hubo.left_is_clear():
  hubo.turn_left()
\dred@elif$ hubo.right_is_clear():
  turn_right()
else:
  turn_around()
\end{V}
</text>
<text layer="delta" matrix="1 0 0 1 0 96" pin="h" transformations="translations" pos="0 63.9124" stroke="darkblue" type="minipage" width="736" valign="top">|elif| combines |else| and |if| to express many alternatives without complicated indentation.</text>
</page>
<page title="while-loops" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">A |for|-loop repeats some instructions a fixed number of times.</text>
<text layer="beta" pin="h" transformations="translations" pos="0 471.203" stroke="darkblue" type="minipage" width="736" valign="top">A |while|-loop repeats instructions as long as some condition is true.</text>
<text layer="gamma" pin="h" transformations="translations" pos="0 386.356" stroke="darkblue" type="minipage" width="736" valign="top">Go forward until we reach a beeper:

\begin{V}
\dred@while$ not hubo.on_beeper():
  hubo.move()
\end{V}
</text>
</page>
<page title="Around the world in 80 days" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<layer name="epsilon"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<view layers="alpha beta gamma epsilon" active="epsilon"/>
<view layers="alpha beta gamma delta" active="delta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Let&apos;s write a program to let the robot walk around the boundary of the world until he comes back to the starting point.</text>
<text layer="beta" matrix="1 0 0 1 0 16" pin="h" transformations="translations" pos="0 404.255" stroke="darkblue" type="minipage" width="736" valign="top">Solution outline:
\begin{enumerate}
\item Put down a beeper to mark starting point
\item Move forward until facing wall
\item Turn left
\item Repeat steps 2 and 3 until we find the beeper
\item Finish when we found the beeper
\end{enumerate}</text>
<text layer="gamma" matrix="1 0 0 1 0 16" pin="h" transformations="translations" pos="0 180.086" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
hubo.drop_beeper()
while not hubo.on_beeper():
  if hubo.front_is_clear():
    hubo.move()
  else:
    hubo.turn_left()
\end{V}
</text>
<text layer="delta" transformations="translations" pos="485.86 167.271" stroke="black" type="label" valign="baseline">|hubo.move()|</text>
<path stroke="darkred" arrow="normal/normal">
475.706 179.601 m
362.56 182.502
277.701 169.447
218.227 167.996 s
</path>
<text layer="epsilon" transformations="translations" pos="497.465 128.83" stroke="darkred" type="label" valign="baseline">Doesn&apos;t work!</text>
</page>
<page title="Sometimes we need right turns" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<view layers="alpha beta gamma delta" active="delta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkred" type="minipage" width="736" valign="top">\begin{V}
hubo.drop_beeper()
hubo.move()
while not hubo.on_beeper():
  if hubo.right_is_clear():
    turn_right()
  elif hubo.front_is_clear():
    hubo.move()
  else:
    hubo.turn_left()
\end{V}
</text>
<text layer="beta" pin="h" transformations="translations" pos="0 197.811" stroke="darkblue" type="minipage" width="736" valign="top">This can go into an \dred{infinite loop}!</text>
<text layer="gamma" matrix="1 0 0 1 6.52814 199.456" transformations="translations" pos="485.86 167.271" stroke="black" type="label" valign="baseline">|hubo.move()|</text>
<path stroke="darkred" arrow="normal/normal">
480.783 374.705 m
421.309 373.98
346.604 379.057
242.161 369.628
210.248 367.452
202.995 367.452 s
</path>
<text layer="delta" pin="h" transformations="translations" pos="0 141.014" stroke="darkblue" type="minipage" width="736" valign="top">Still does not work when there is a wall in front of the starting position!</text>
<image matrix="1 0 0 1 192.928 -24.66" rect="311.382 206.257 424.618 321.743" bitmap="1"/>
</page>
<page title="Getting out of the starting position" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="beta gamma" active="gamma"/>
<text layer="alpha" matrix="1 0 0 1 -0.00003862 0.00018858" pin="h" transformations="translations" pos="0 528" stroke="darkred" type="minipage" width="736" valign="top">\begin{V}
hubo.drop_beeper()
if not hubo.front_is_clear():
  hubo.turn_left()
hubo.move()
while not hubo.on_beeper():
  if hubo.right_is_clear():
    turn_right()
    hubo.move()
  elif hubo.front_is_clear():
    hubo.move()
  else:
    hubo.turn_left()
\end{V}
</text>
<text layer="beta" pin="h" transformations="translations" pos="0 97.3866" stroke="darkblue" type="minipage" width="736" valign="top">Still has a problem if not starting at position (1,1).</text>
<image matrix="1 0 0 1 218.314 -50.0453" rect="288.135 203.258 447.865 324.742" bitmap="3"/>
<text layer="gamma" matrix="1 0 0 1 -0.00003862 0.00018858" pin="h" transformations="translations" pos="0 528" stroke="darkred" type="minipage" width="736" valign="top">\begin{V}
hubo.drop_beeper()
\dred@while$ not hubo.front_is_clear():
  hubo.turn_left()
hubo.move()
while not hubo.on_beeper():
  if hubo.right_is_clear():
    turn_right()
    hubo.move()
  elif hubo.front_is_clear():
    hubo.move()
  else:
    hubo.turn_left()
\end{V}
</text>
</page>
<page title="Write code for humans" section="">
<layer name="alpha"/>
<view layers="alpha" active="alpha"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top" size="small">One of the secrets of writing good, correct, elegant programs is to write them as if you wrote them for a \dred{human} reader, not a computer.  Let&apos;s clean up our program:

\begin{V}
# This program lets the robot go around his world counter-
# clockwise, stopping when he returns to the starting point.
from cs1robots import *
load_world()
hubo = Robot(beepers = 1)

def turn_right():
  for i in range(3): 
    hubo.turn_left()

def mark_starting_point_and_move():
  hubo.drop_beeper()
  while not hubo.front_is_clear():
    hubo.turn_left()
  hubo.move()
\end{V}
</text>
</page>
<page>
<layer name="alpha"/>
<view layers="alpha" active="alpha"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top" size="small">\begin{V}
def follow_right_wall():
  if hubo.right_is_clear():
    # Keep to the right
    turn_right()
    hubo.move()
  elif hubo.front_is_clear(): 
    # move following the right wall
    hubo.move()
  else:
    # follow the wall
    hubo.turn_left()

# end of definitions, begin solution

mark_starting_point_and_move()
            
while not hubo.on_beeper(): 
  follow_right_wall()
\end{V}
</text>
</page>
<page title="Stepwise refinement" section="">
<layer name="alpha"/>
<view layers="alpha" active="alpha"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Steps to follow when writing a program:

\begin{itemize}
\item start simple;
\item introduce small changes, one at a time;
\item \dred{make sure} that each change does not invalidate the work you have done before;
\item add appropriate comments (not just repeating what the instruction does);
\item choose descriptive names.
\end{itemize}
</text>
</page>
</ipe>
