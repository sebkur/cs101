<?xml version="1.0"?>
<!DOCTYPE ipe SYSTEM "ipe.dtd">
<ipe version="70206" creator="ipetoipe 7.2.7">
<info created="D:20100118121208" modified="D:20101028150533" title="CS101 Lecture 11" author="Otfried Cheong"/>
<bitmap id="1" width="180" height="220" length="11326" ColorSpace="DeviceRGB" Filter="DCTDecode" BitsPerComponent="8" encoding="base64">
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
</bitmap>
<bitmap id="2" width="602" height="402" length="9864" ColorSpace="DeviceRGB" Filter="FlateDecode" BitsPerComponent="8" encoding="base64">
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
</bitmap>
<bitmap id="3" width="58" height="50" length="865" ColorSpace="DeviceRGB" Filter="FlateDecode" BitsPerComponent="8" ColorKey="fbfbfd" encoding="base64">
eNrtmE1LG0EYx+NrXBQtoXhQFJEYYnxpXEMrEQIJsgkSSihFog095OBFwZ5VqEe9ikggNyOi
HqyoiO03CEHEg4iICC099DNIa//JtNNhNptskgkmdB/+hNnMDPnx5HmZ2YeHnw+GqlzfTB8g
dlD5tFTV4t6qcCw3qHzUqvj3DdT/GfWpZCrQFuQFsrHvrw0PvxocdPfps9JRlecKGKD1qXUt
HX88TiVSEJZFX7z1+/0NGWtsbGxqapIkCZ9msxmPDdrmdDpLAdaJygGD7Wt9/XezGcxzc3Mr
+WxtbW0/Y263e2hoqGhgSpsXlQXGrl8Zzc/PnwUCjyZTyuVSQ+7MzGDqrrcX49XV1b29vVgs
JpwWj/geYFq0ad/W1f1obv6sKOAhOpdlFnU3HKZT9z095aPVQqW0NTU1nZ2d09PTRdC2trZ6
vd7igIujxQJCC6pCIwF7BwYGxNLmjgTiW3riyptldCVoURnE0ubNMsQtaAOBALJsRZ+VL251
0pJIqAraT5Lk8USJb08nJ2lCcbq1WiuB9osk6Y8E4d2hoF5WW1tLOm9/f3/eXgbURCKxvLws
pPMWcU4ALX4UwAUdh0ZGRkQdbPQbdaxO3xL3Et+2tbX5fL4SgbkAxph+Eq9CeCQrfV4fDloI
v8i7SPqccBZIJl/mQN3aen9/n+5liIeNjY3x8XGHw1G6h2kkcLQEmNLKsswV29PTyVTKlRV1
eztyd9fLloV4PA5Um80mnJYYR6soCp1CjhOSk5Pg+bnMd96dmdvbPxUsGo3SXeXwLTtmaUly
LS0twVeUFnZ09PriwvnvVLMbvrmx0UfQjo2NJZNJhD2iXSwta2pa5Is/Yywt7PAwdHk5jMH+
/tT1tZ2dAi1qwujoqMViKTEMcrcJLsvIjYxgq2vCwcGbx0fT1ZVDXROEVDD9dYzbQpxst9sB
HAwGs17ErFYrUBcXFzFuaZG7u0PIMLFXYLaU5V4MYEo7MTHBXW89Hg+ldblcQrwqkJabNWgN
2iehhXKsJMcwdZbRWTWtcGCW1tJsyVq7aPlSVzBy+6azbAUr/XyrVXjZ7tD+rD0rbUdHB/dm
KRQKUdqurq7Z2Vn27rC5uSmcVg2sRZu1HXC+FfvWTmd304rbHO88y/FG1JAhQ4YqWb8B0wZT
mQ==
</bitmap>
<ipestyle name="presentation">
<symbol name="arrow/arc(spx)">
<path stroke="sym-stroke" fill="sym-stroke" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/farc(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="mark/circle(sx)" transformations="translations">
<path fill="sym-stroke">
0.6 0 0 0.6 0 0 e
0.4 0 0 0.4 0 0 e
</path>
</symbol>
<symbol name="mark/disk(sx)" transformations="translations">
<path fill="sym-stroke">
0.6 0 0 0.6 0 0 e
</path>
</symbol>
<symbol name="mark/fdisk(sfx)" transformations="translations">
<group>
<path fill="sym-stroke" fillrule="eofill">
0.6 0 0 0.6 0 0 e
0.4 0 0 0.4 0 0 e
</path>
<path fill="sym-fill">
0.4 0 0 0.4 0 0 e
</path>
</group>
</symbol>
<symbol name="mark/box(sx)" transformations="translations">
<path fill="sym-stroke" fillrule="eofill">
-0.6 -0.6 m
0.6 -0.6 l
0.6 0.6 l
-0.6 0.6 l
h
-0.4 -0.4 m
0.4 -0.4 l
0.4 0.4 l
-0.4 0.4 l
h
</path>
</symbol>
<symbol name="mark/square(sx)" transformations="translations">
<path fill="sym-stroke">
-0.6 -0.6 m
0.6 -0.6 l
0.6 0.6 l
-0.6 0.6 l
h
</path>
</symbol>
<symbol name="mark/fsquare(sfx)" transformations="translations">
<group>
<path fill="sym-stroke" fillrule="eofill">
-0.6 -0.6 m
0.6 -0.6 l
0.6 0.6 l
-0.6 0.6 l
h
-0.4 -0.4 m
0.4 -0.4 l
0.4 0.4 l
-0.4 0.4 l
h
</path>
<path fill="sym-fill">
-0.4 -0.4 m
0.4 -0.4 l
0.4 0.4 l
-0.4 0.4 l
h
</path>
</group>
</symbol>
<symbol name="mark/cross(sx)" transformations="translations">
<group>
<path fill="sym-stroke">
-0.43 -0.57 m
0.57 0.43 l
0.43 0.57 l
-0.57 -0.43 l
h
</path>
<path fill="sym-stroke">
-0.43 0.57 m
0.57 -0.43 l
0.43 -0.57 l
-0.57 0.43 l
h
</path>
</group>
</symbol>
<symbol name="arrow/fnormal(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/pointed(spx)">
<path stroke="sym-stroke" fill="sym-stroke" pen="sym-pen">
0 0 m
-1 0.333 l
-0.8 0 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/fpointed(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-0.8 0 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/linear(spx)">
<path stroke="sym-stroke" pen="sym-pen">
-1 0.333 m
0 0 l
-1 -0.333 l
</path>
</symbol>
<symbol name="arrow/fdouble(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
-1 0 m
-2 0.333 l
-2 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/double(spx)">
<path stroke="sym-stroke" fill="sym-stroke" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
-1 0 m
-2 0.333 l
-2 -0.333 l
h
</path>
</symbol>
<pen name="normal" value="1.2"/>
<pen name="heavier" value="2.4"/>
<pen name="fat" value="3.6"/>
<pen name="ultrafat" value="6"/>
<symbolsize name="normal" value="9"/>
<symbolsize name="large" value="15"/>
<symbolsize name="small" value="6"/>
<symbolsize name="tiny" value="3.3"/>
<arrowsize name="normal" value="15"/>
<arrowsize name="large" value="20"/>
<arrowsize name="small" value="10"/>
<arrowsize name="tiny" value="6"/>
<color name="red" value="1 0 0"/>
<color name="green" value="0 1 0"/>
<color name="blue" value="0 0 1"/>
<color name="yellow" value="1 1 0"/>
<color name="orange" value="1 0.647 0"/>
<color name="gold" value="1 0.843 0"/>
<color name="purple" value="0.627 0.125 0.941"/>
<color name="gray" value="0.745"/>
<color name="brown" value="0.647 0.165 0.165"/>
<color name="navy" value="0 0 0.502"/>
<color name="pink" value="1 0.753 0.796"/>
<color name="seagreen" value="0.18 0.545 0.341"/>
<color name="turquoise" value="0.251 0.878 0.816"/>
<color name="violet" value="0.933 0.51 0.933"/>
<color name="darkblue" value="0 0 0.545"/>
<color name="darkcyan" value="0 0.545 0.545"/>
<color name="darkgray" value="0.663"/>
<color name="darkgreen" value="0 0.392 0"/>
<color name="darkmagenta" value="0.545 0 0.545"/>
<color name="darkorange" value="1 0.549 0"/>
<color name="darkred" value="0.545 0 0"/>
<color name="lightblue" value="0.678 0.847 0.902"/>
<color name="lightcyan" value="0.878 1 1"/>
<color name="lightgray" value="0.827"/>
<color name="lightgreen" value="0.565 0.933 0.565"/>
<color name="lightyellow" value="1 1 0.878"/>
<color name="title" value="0.4 0 0.4"/>
<dashstyle name="dashed" value="[4] 0"/>
<dashstyle name="dotted" value="[1 3] 0"/>
<dashstyle name="dash dotted" value="[4 2 1 2] 0"/>
<dashstyle name="dash dot dotted" value="[4 2 1 2 1 2] 0"/>
<textsize name="normal" value="\normalsize"/>
<textsize name="large" value="\large"/>
<textsize name="small" value="\normalsize"/>
<textsize name="huge" value="\LARGE"/>
<textstretch name="normal" value="2.8"/>
<textstretch name="large" value="2.8"/>
<textstretch name="small" value="2.4"/>
<textstretch name="huge" value="2.8"/>
<textstyle name="normal" begin="\begin{flushleft}" end="\end{flushleft}"/>
<textstyle name="center" begin="\begin{center}" end="\end{center}"/>
<textstyle name="itemize" begin="\begin{flushleft}\begin{itemize}" end="\end{itemize}\end{flushleft}"/>
<textstyle name="item" begin="\begin{flushleft}\begin{itemize}\item{}" end="\end{itemize}\end{flushleft}"/>
<gridsize name="16 pts (~6 mm)" value="16"/>
<gridsize name="32 pts (~12 mm)" value="32"/>
<gridsize name="10 pts (~3.5 mm)" value="10"/>
<gridsize name="20 pts (~7 mm)" value="20"/>
<gridsize name="14 pts (~5 mm)" value="14"/>
<gridsize name="28 pts (~10 mm)" value="28"/>
<gridsize name="56 pts (~20 mm)" value="56"/>
<anglesize name="90 deg" value="90"/>
<anglesize name="60 deg" value="60"/>
<anglesize name="45 deg" value="45"/>
<anglesize name="30 deg" value="30"/>
<anglesize name="22.5 deg" value="22.5"/>
<preamble>
\renewcommand\rmdefault{cmss}
\makeatletter
\leftmargini 1.5em
\leftmargin \leftmargini
\leftmarginii  1.2em
\leftmarginiii 1em
\def\@listI{\leftmargin\leftmargini
            \parsep \z@
	    \partopsep 3pt
	    \topsep \z@
            \itemsep \z@}
\@listI
\def\@listii {\leftmargin\leftmarginii
              \labelwidth\leftmarginii
              \advance\labelwidth-\labelsep
              \topsep    \z@
              \parsep    \z@
              \itemsep   \parsep}
\def\@listiii{\leftmargin\leftmarginiii
              \labelwidth\leftmarginiii
              \advance\labelwidth-\labelsep
              \topsep    \z@
              \parsep    \z@
              \partopsep \z@
              \itemsep   \topsep}
\makeatother
</preamble>
<layout paper="800 600" origin="32 0" frame="736 528" skip="32" crop="no"/>
<titlestyle pos="368 554" size="large" color="title"  halign="center" valign="baseline"/>
<tiling name="falling" angle="-60" step="12" width="3"/>
<tiling name="rising" angle="30" step="12" width="3"/>
</ipestyle>
<ipestyle name="kaisttheme">
<symbol name="Background">
<group>
<image matrix="1 0 0 1 -162.234 308.933" rect="339.004 239.003 396.996 288.997" bitmap="3"/>
<group matrix="0.343668 0 0 0.343668 -51.9093 459.634">
<path fill="0.563 0.727 0.855" fillrule="wind">
76.697 277.771 m
120.493 269.94
192.854 264.827
274.709 264.827 c
356.564 264.827
428.927 269.94
472.718 277.771 c
428.927 285.601
356.564 290.72
274.709 290.72 c
192.854 290.72
120.493 285.601
76.697 277.771 c
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
275.279 299.355 m
294.577 299.355 l
294.577 373.497 l
275.279 373.497 l
275.279 299.355 l
h
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
418.065 373.465 m
361.604 373.465 l
361.669 357.398 l
380.069 357.398 l
380.069 299.214 l
399.603 299.279 l
399.603 357.398 l
418.065 357.398 l
418.065 373.465 l
h
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
249.098 374.512 m
241.957 374.512 l
229.799 374.512 l
222.663 374.512 l
200.923 313.64 l
182.964 337.545 l
209.964 373.497 l
190.668 373.497 l
169.085 344.764 l
169.085 373.497 l
149.792 373.497 l
149.792 299.355 l
169.085 299.355 l
169.085 330.332 l
192.384 299.326 l
195.813 299.326 l
211.677 299.326 l
215.107 299.326 l
235.337 355.983 l
247.498 315.289 l
229.329 315.289 l
229.329 299.226 l
259.475 299.226 l
259.475 299.326 l
271.567 299.326 l
249.098 374.512 l
h
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
341.955 345.908 m
341.927 345.95 l
319.143 345.95 l
319.143 357.493 l
357.066 357.493 l
357.066 373.56 l
323.335 373.56 l
323.318 373.532 l
311.282 373.532
301.522 363.769
301.522 351.728 c
301.522 339.879
310.971 330.261
322.742 329.946 c
322.76 329.887 l
347.43 329.887 l
347.43 315.289 l
303.776 315.289 l
303.776 299.226 l
342.373 299.226 l
342.399 299.261 l
354.979 299.635
365.065 309.921
365.065 322.573 c
365.065 335.392
354.739 345.781
341.955 345.908 c
</path>
</group>
<text transformations="translations" pos="100 588" stroke="kaist-dark-blue" type="label" valign="top">
CS101</text>
<path stroke="kaist-dark-blue" pen="fat">
0 536 m
736 536 l
</path>
</group>
</symbol>
<color name="kaist-dark-blue" value="0.065 0.155 0.563"/>
<color name="dred" value="0.7 0 0"/>
<layout paper="800 600" origin="32 0" frame="736 528" skip="32" crop="no"/>
<titlestyle pos="736 554" size="large" color="title"  halign="right" valign="baseline"/>
</ipestyle>
<ipestyle name="cs101style">
<preamble>
\newcommand{\dred}[1]{\textcolor{dred}{#1}}
\usepackage{fancyvrb}
\DefineShortVerb[formatcom=\color{darkred}]{\|}
\CustomVerbatimEnvironment{V}{Verbatim}{formatcom=\color{black},commandchars=\\\@\$}
\def\r{$\rightarrow$}
</preamble>
</ipestyle>
<page title="Blackjack" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<image layer="alpha" matrix="0.705293 0 0 0.705293 -195.265 264.332" rect="278 154 458 374" bitmap="1"/>
<text transformations="translations" pos="160 528" stroke="darkblue" type="minipage" width="576" valign="top">There are 52 cards.  Each card has a \dred{face} and a \dred{suit}.
The suits \dred{clubs}, \dred{spades}, \dred{hearts}, and \dred{diamonds}.
The faces are \dred{2, 3, \ldots, 10, Jack, Queen, King, Ace}. The \dred{value} of a card is the number for a number card, 11 for an Ace, and 10 for Jack, Queen, and King.
</text>
<text layer="beta" matrix="1 0 0 1 -0.00001282 -233.333" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
\dred@class$ Card(object):
  &quot;&quot;&quot;A Blackjack card.&quot;&quot;&quot;
  pass

card = \dred@Card()$
card.face = &quot;Ace&quot;
card.suit = &quot;Spades&quot;
card.value = 11
\end{V}</text>
</page>
<page title="Methods" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">We do not really need the |value| attribute, since the value can be computed from the |face| attribute.   We add a |value()| method to our |Card| class:

\begin{V}
class Card(object):
  &quot;&quot;&quot;A Blackjack card.&quot;&quot;&quot;
  \dred@def value(self)$:
    if type(self.face) == int:
      return self.face
    elif self.face == &quot;Ace&quot;:
      return 11
    else:
      return 10
\end{V}
</text>
<text layer="beta" matrix="1 0 0 1 48.4211 -7.01754" transformations="translations" pos="495.719 338.947" stroke="darkblue" type="label" valign="baseline">\dred{method} of |Card|</text>
<path stroke="darkorange" arrow="normal/normal">
528.702 340.351 m
278.175 340.351 l
</path>
<text layer="gamma" transformations="translations" pos="384 176" stroke="darkblue" type="minipage" width="352" valign="top">|self| refers to the object itself inside the method.</text>
<path stroke="darkorange" arrow="normal/normal">
368 144 m
315.368 154.386
272.561 199.298
245.193 218.947 s
</path>
</page>
<page>
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" matrix="1 0 0 1 -448 336" transformations="translations" pos="448 192" stroke="darkblue" type="minipage" width="736" valign="top">We can create and use |Card| objects:

\begin{V}
&gt;&gt;&gt; card = Card()
&gt;&gt;&gt; card.face = &quot;Ace&quot;
&gt;&gt;&gt; card.suit = &quot;Spades&quot;
&gt;&gt;&gt; card_string(card)
&apos;an Ace of Spades&apos;
&gt;&gt;&gt; card.value()
11
\end{V}
</text>
<text layer="beta" pin="h" transformations="translations" pos="0 225.57" stroke="darkblue" type="minipage" width="736" valign="top">We need nicer syntax to create |Card| objects: |Card(8, &quot;Clubs&quot;)|.

\vspace{1ex}
And |card_string| should be a method of |Card|.</text>
</page>
<page title="Constructors" section="">
<layer name="alpha"/>
<view layers="alpha" active="alpha"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Objects can have a special method |__init__|, called a \dred{constructor}.  Whenever an object of this type is created, the constructor is called.

\begin{V}
FACES = range(2,11) + [&apos;Jack&apos;,&apos;Queen&apos;,&apos;King&apos;,&apos;Ace&apos;]
SUITS = [ &apos;Clubs&apos;, &apos;Diamonds&apos;, &apos;Hearts&apos;, &apos;Spades&apos;]

class Card(object):
  &quot;&quot;&quot;A Blackjack card.&quot;&quot;&quot;

  def \dred@__init__$(self, face, suit):
    assert face in FACES and suit in SUITS
    self.face = face
    self.suit = suit
\end{V}
</text>
</page>
<page>
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Now creating cards is elegant:

\begin{V}
hand = [ Card(&quot;Ace&quot;, &quot;Spades&quot;),
         Card(8, &quot;Diamonds&quot;),
         Card(&quot;Jack&quot;, &quot;Hurts&quot;),
         Card(10, &quot;Clubs&quot;) ]
\end{V}</text>
<text layer="beta" pin="h" transformations="translations" pos="0 322.12" stroke="darkblue" type="minipage" width="736" valign="top">Let&apos;s change |card_string(card)| into |card.string()|:

\begin{V}
  def string(self):
    article = &quot;a &quot;
    if self.face in [8, &quot;Ace&quot;]: article = &quot;an &quot;
    return (article + str(self.face) + 
            &quot; of &quot; + self.suit)
\end{V}
</text>
<text layer="gamma" pin="h" transformations="translations" pos="0 84.3144" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
for card in hand:
  print card.string(), &quot;has value&quot;, card.value()
\end{V}
</text>
</page>
<page title="String conversion" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">We can make conversion to strings even nicer:  |str(card)| calls the special method |__str__|:

\begin{V}
  def \dred@__str__$(self):
    article = &quot;a &quot;
    if self.face in [8, &quot;Ace&quot;]: article = &quot;an &quot;
    return (article + str(self.face) + 
            &quot; of &quot; + self.suit)
\end{V}
</text>
<text layer="beta" pin="h" transformations="translations" pos="0 256.72" stroke="darkblue" type="minipage" width="736" valign="top">Now we can write:

\begin{V}
for card in hand:
  print card, &quot;has value&quot;, card.value()
\end{V}
</text>
<text layer="gamma" matrix="1 0 0 1 -69.1099 -23.2461" transformations="translations" pos="222.555 104.921" stroke="darkblue" type="label" valign="baseline">|print| automatically converts its arguments to |str|</text>
<path stroke="darkorange" arrow="normal/normal">
138.995 89.2147 m
108.838 86.0733
100.042 62.199
57.9476 67.8534
61.089 113.089
131.455 117.487
138.995 148.901 s
</path>
</page>
<page title="More chicken!" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Let&apos;s improve our |Chicken| object by adding a constructor, |move| and |jump| methods.</text>
<text layer="beta" pin="h" transformations="translations" pos="0 436.954" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
class Chicken(object):
  &quot;&quot;&quot;Graphic representation of a chicken.&quot;&quot;&quot;
  def __init__(self, hen = False):
    layer = Layer()
    # make all the parts
    self.layer = layer
    self.body = body
    self.wing = wing
    self.eye = eye

  def move(self, dx, dy):
    self.layer.move(dx, dy)
\end{V}</text>
</page>
<page title="A Deck object" section="">
<layer name="alpha"/>
<view layers="alpha" active="alpha"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Let&apos;s create another object, that represents a shuffled deck of 52 cards.  We only need one method: drawing a card from the top of the deck:

\begin{V}
class Deck(object):
  &quot;&quot;&quot;A deck of cards.&quot;&quot;&quot;
  def __init__(self):
    &quot;Create a deck of 52 cards and shuffle them.&quot;
    self.cards = []
    for suit in SUITS:
      for face in FACES:
        self.cards.append(Card(face, suit))
    random.shuffle(self.cards)
\end{V}

</text>
<text matrix="1 0 0 1 0 13.6842" pin="h" transformations="translations" pos="0 89.3476" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
  def draw(self):
    &quot;&quot;&quot;Draw the top card from the deck.&quot;&quot;&quot;
    return self.cards.pop()
\end{V}
</text>
</page>
<page>
<layer name="alpha"/>
<view layers="alpha" active="alpha"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top" size="small">\begin{V}
num_players = 3
num_cards = 5
deck = Deck()
hands = []
for j in range(num_players):
  hands.append([])

for i in range(num_cards):
  for j in range(num_players):
    card = deck.draw() 
    hands[j].append(card)
    print &quot;Player&quot;, j+1, &quot;draws&quot;, card

for j in range(num_players):
  print (&quot;Player %d&apos;s hand (value %d):&quot; % 
         (j+1, hand_value(hands[j])))
  for card in hands[j]:
    print &quot; &quot;, card
\end{V}
</text>
<text transformations="translations" pos="341.263 472" stroke="darkblue" type="label" valign="baseline">A list of lists (one for each player)</text>
<path stroke="darkorange" arrow="normal/normal">
333.965 480.211 m
283.789 480.211
269.193 436.421
157.895 433.684 s
</path>
</page>
<page title="Blackjack" section="">
<layer name="alpha"/>
<view layers="alpha" active="alpha"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Time to play Blackjack:

\begin{V}
You are dealt a 6 of Hearts
Dealer is dealt a hidden card
You are dealt a 3 of Spades
Dealer is dealt a 9 of Hearts
Your total is 9
Would you like another card? (y/n) y
You are dealt an Ace of Clubs
Your total is 20
Would you like another card? (y/n) n
The dealer&apos;s hidden card was a 10 of Spades
The dealer&apos;s total is 19
Your total is 20
The dealer&apos;s total is 19
You win!
\end{V}
</text>
</page>
<page title="Equality" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">The comparison operators |==|, |!=|, |&lt;| etc. do not work automatically for objects:

\begin{V}
&gt;&gt;&gt; Card(8, &quot;Diamonds&quot;) == Card(8, &quot;Diamonds&quot;)
False
&gt;&gt;&gt; Card(8, &quot;Diamonds&quot;) == Card(9, &quot;Diamonds&quot;)
False
\end{V}
</text>
<text layer="beta" matrix="1 0 0 1 0 3.82353" pin="h" transformations="translations" pos="0 292.518" stroke="darkblue" type="minipage" width="736" valign="top">We can define \dred{equality} through the special method |__eq__|:

\begin{V}
  def __eq__(self, rhs):
    return (self.face == rhs.face and 
            self.suit == rhs.suit)
  def __ne__(self, rhs):
    return not self == rhs
\end{V}
</text>
</page>
<page title="Blackjack with Graphics" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<image layer="alpha" matrix="1 0 0 1 2.61438 82.3529" rect="142.278 113.269 593.722 414.731" bitmap="2"/>
<path layer="beta" matrix="1 0 0 1 1.96078 2.61438" stroke="yellow" pen="heavier">
152.314 476.471 m
152.314 388.889 l
432.052 388.889 l
432.052 476.471 l
h
</path>
<path stroke="yellow" pen="heavier">
153.621 352.941 m
153.621 275.817 l
437.281 275.817 l
437.281 352.941 l
h
</path>
<path stroke="yellow" pen="heavier">
541.856 462.745 m
541.856 413.725 l
585.647 413.725 l
585.647 462.745 l
h
</path>
<path stroke="yellow" pen="heavier">
541.856 337.908 m
541.856 292.157 l
588.261 292.157 l
588.261 337.908 l
h
</path>
<path stroke="yellow" pen="heavier">
290.876 270.588 m
290.876 242.484 l
449.699 242.484 l
449.699 270.588 l
h
</path>
<path stroke="yellow" pen="heavier">
289.569 236.601 m
289.569 211.111 l
452.314 211.111 l
452.314 236.601 l
h
</path>
<text matrix="1 0 0 1 -16.9935 -18.3007" transformations="translations" pos="20.9412 452.288" stroke="darkblue" type="label" valign="baseline">Player hand</text>
<text matrix="1 0 0 1 -10.4575 -9.15033" transformations="translations" pos="6.56209 310.458" stroke="darkblue" type="label" valign="baseline">Dealer hand</text>
<text matrix="1 0 0 1 -11.1111 -7.18954" transformations="translations" pos="617.02 439.869" stroke="darkblue" type="label" valign="baseline">Player score</text>
<text transformations="translations" pos="604.601 307.19" stroke="darkblue" type="label" valign="baseline">Dealer score</text>
<text transformations="translations" pos="98.719 164.706" stroke="darkblue" type="label" valign="baseline">Message</text>
<text transformations="translations" pos="422.248 152.288" stroke="darkblue" type="label" valign="baseline">Question (with y/n answer)</text>
<path stroke="darkblue" pen="heavier" arrow="normal/normal">
410.484 162.092 m
349.699 157.516
354.928 200 s
</path>
<path stroke="darkblue" pen="heavier" arrow="normal/normal">
208.523 169.935 m
249.046 183.007
239.895 245.752
279.111 253.595 s
</path>
</page>
<page title="Table object" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">A |Table| represents the Blackjack table.  It provides the following methods:

\begin{itemize}
\item |clear()| clear everything
\item |close()| close window and end game
\item |set_score(which, text)|  where |which in [ 0, 1 ]|
\item |set_message(text)|
\item |ask(prompt)| waits for |y| or |n| and returns |True| or |False|
\end{itemize}
</text>
<text layer="beta" pin="h" transformations="translations" pos="0 261.214" stroke="darkblue" type="minipage" width="736" valign="top">|Table| has two attributes |dealer| and |player|.  These are |Hand| objects that represent the hand on the table.</text>
<text layer="gamma" pin="h" transformations="translations" pos="0 170.944" stroke="darkblue" type="minipage" width="736" valign="top">Methods of |Hand| objects:

\begin{itemize}
\item |clear()|
\item |add(card, hidden = False)|
\item |show()| shows all hidden cards
\item |value()| return value of hand
\end{itemize}
</text>
</page>
<page title="Waiting for user interaction" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">The |Table.ask(prompt)| method must wait for the user to press a key:

\begin{V}
  def ask(self, prompt):
    self.question.setMessage(prompt)
    while True:
      e = \dred@self.canvas.wait$()
      d = \dred@e.getDescription$()
      if d == &quot;canvas close&quot;:
        sys.exit(1)
      if d == &quot;keyboard&quot;:
        key = \dred@e.getKey$() 
        if key == &apos;y&apos;:
          return True
        if key == &apos;n&apos;:
          return False
 \end{V}
</text>
<text layer="beta" matrix="1 0 0 1 -7.84314 -8.49673" transformations="translations" pos="524.275 343.464" stroke="darkblue" type="label" valign="baseline">|e| is an \dred{event} object</text>
<path stroke="darkorange" pen="heavier" arrow="normal/normal">
500.745 343.464 m
414.471 343.464 l
</path>
</page>
<page title="User interface programming" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Programs with a \dred{graphical user interface (GUI)} are structured around \dred{events}.  Most of the time, the program just waits for an event to happen.

Events are for instance:

\begin{itemize}
\item key presses
\item window is minimized, maximized, or closed
\item mouse is moved
\item mouse button is pressed
\item cursor enters window or leaves window
\end{itemize}
</text>
<text layer="beta" pin="h" transformations="translations" pos="0 198.914" stroke="darkblue" type="minipage" width="736" valign="top">\dred{Event-based} programming means that a program doesn&apos;t have a sequential flow of control, but consists of functions that are called by events.</text>
</page>
</ipe>
