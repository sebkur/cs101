<?xml version="1.0"?>
<!DOCTYPE ipe SYSTEM "ipe.dtd">
<ipe version="70206" creator="ipetoipe 7.2.7">
<info created="D:20100118121208" modified="D:20111001161133" title="CS101 Lecture 4" author="Otfried Cheong"/>
<preamble>\usepackage{amssymb,amsmath}</preamble>
<bitmap id="1" width="602" height="602" length="12385" ColorSpace="DeviceRGB" Filter="FlateDecode" BitsPerComponent="8" encoding="base64">
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
RNhQRESkvTYUERGJef4/vjzY8A==
</bitmap>
<bitmap id="2" width="58" height="50" length="865" ColorSpace="DeviceRGB" Filter="FlateDecode" BitsPerComponent="8" ColorKey="fbfbfd" encoding="base64">
eNrtmE1LG0EYx+NrXBQtoXhQFJEYYnxpXEMrEQIJsgkSSihFog095OBFwZ5VqEe9ikggNyOi
HqyoiO03CEHEg4iICC099DNIa//JtNNhNptskgkmdB/+hNnMDPnx5HmZ2YeHnw+GqlzfTB8g
dlD5tFTV4t6qcCw3qHzUqvj3DdT/GfWpZCrQFuQFsrHvrw0PvxocdPfps9JRlecKGKD1qXUt
HX88TiVSEJZFX7z1+/0NGWtsbGxqapIkCZ9msxmPDdrmdDpLAdaJygGD7Wt9/XezGcxzc3Mr
+WxtbW0/Y263e2hoqGhgSpsXlQXGrl8Zzc/PnwUCjyZTyuVSQ+7MzGDqrrcX49XV1b29vVgs
JpwWj/geYFq0ad/W1f1obv6sKOAhOpdlFnU3HKZT9z095aPVQqW0NTU1nZ2d09PTRdC2trZ6
vd7igIujxQJCC6pCIwF7BwYGxNLmjgTiW3riyptldCVoURnE0ubNMsQtaAOBALJsRZ+VL251
0pJIqAraT5Lk8USJb08nJ2lCcbq1WiuB9osk6Y8E4d2hoF5WW1tLOm9/f3/eXgbURCKxvLws
pPMWcU4ALX4UwAUdh0ZGRkQdbPQbdaxO3xL3Et+2tbX5fL4SgbkAxph+Eq9CeCQrfV4fDloI
v8i7SPqccBZIJl/mQN3aen9/n+5liIeNjY3x8XGHw1G6h2kkcLQEmNLKsswV29PTyVTKlRV1
eztyd9fLloV4PA5Um80mnJYYR6soCp1CjhOSk5Pg+bnMd96dmdvbPxUsGo3SXeXwLTtmaUly
LS0twVeUFnZ09PriwvnvVLMbvrmx0UfQjo2NJZNJhD2iXSwta2pa5Is/Yywt7PAwdHk5jMH+
/tT1tZ2dAi1qwujoqMViKTEMcrcJLsvIjYxgq2vCwcGbx0fT1ZVDXROEVDD9dYzbQpxst9sB
HAwGs17ErFYrUBcXFzFuaZG7u0PIMLFXYLaU5V4MYEo7MTHBXW89Hg+ldblcQrwqkJabNWgN
2iehhXKsJMcwdZbRWTWtcGCW1tJsyVq7aPlSVzBy+6azbAUr/XyrVXjZ7tD+rD0rbUdHB/dm
KRQKUdqurq7Z2Vn27rC5uSmcVg2sRZu1HXC+FfvWTmd304rbHO88y/FG1JAhQ4YqWb8B0wZT
mQ==
</bitmap>
<ipestyle name="presentation">
<symbol name="arrow/arc(spx)">
<path stroke="sym-stroke" fill="sym-stroke" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/farc(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="mark/circle(sx)" transformations="translations">
<path fill="sym-stroke">
0.6 0 0 0.6 0 0 e
0.4 0 0 0.4 0 0 e
</path>
</symbol>
<symbol name="mark/disk(sx)" transformations="translations">
<path fill="sym-stroke">
0.6 0 0 0.6 0 0 e
</path>
</symbol>
<symbol name="mark/fdisk(sfx)" transformations="translations">
<group>
<path fill="sym-stroke" fillrule="eofill">
0.6 0 0 0.6 0 0 e
0.4 0 0 0.4 0 0 e
</path>
<path fill="sym-fill">
0.4 0 0 0.4 0 0 e
</path>
</group>
</symbol>
<symbol name="mark/box(sx)" transformations="translations">
<path fill="sym-stroke" fillrule="eofill">
-0.6 -0.6 m
0.6 -0.6 l
0.6 0.6 l
-0.6 0.6 l
h
-0.4 -0.4 m
0.4 -0.4 l
0.4 0.4 l
-0.4 0.4 l
h
</path>
</symbol>
<symbol name="mark/square(sx)" transformations="translations">
<path fill="sym-stroke">
-0.6 -0.6 m
0.6 -0.6 l
0.6 0.6 l
-0.6 0.6 l
h
</path>
</symbol>
<symbol name="mark/fsquare(sfx)" transformations="translations">
<group>
<path fill="sym-stroke" fillrule="eofill">
-0.6 -0.6 m
0.6 -0.6 l
0.6 0.6 l
-0.6 0.6 l
h
-0.4 -0.4 m
0.4 -0.4 l
0.4 0.4 l
-0.4 0.4 l
h
</path>
<path fill="sym-fill">
-0.4 -0.4 m
0.4 -0.4 l
0.4 0.4 l
-0.4 0.4 l
h
</path>
</group>
</symbol>
<symbol name="mark/cross(sx)" transformations="translations">
<group>
<path fill="sym-stroke">
-0.43 -0.57 m
0.57 0.43 l
0.43 0.57 l
-0.57 -0.43 l
h
</path>
<path fill="sym-stroke">
-0.43 0.57 m
0.57 -0.43 l
0.43 -0.57 l
-0.57 0.43 l
h
</path>
</group>
</symbol>
<symbol name="arrow/fnormal(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/pointed(spx)">
<path stroke="sym-stroke" fill="sym-stroke" pen="sym-pen">
0 0 m
-1 0.333 l
-0.8 0 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/fpointed(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-0.8 0 l
-1 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/linear(spx)">
<path stroke="sym-stroke" pen="sym-pen">
-1 0.333 m
0 0 l
-1 -0.333 l
</path>
</symbol>
<symbol name="arrow/fdouble(spx)">
<path stroke="sym-stroke" fill="white" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
-1 0 m
-2 0.333 l
-2 -0.333 l
h
</path>
</symbol>
<symbol name="arrow/double(spx)">
<path stroke="sym-stroke" fill="sym-stroke" pen="sym-pen">
0 0 m
-1 0.333 l
-1 -0.333 l
h
-1 0 m
-2 0.333 l
-2 -0.333 l
h
</path>
</symbol>
<pen name="normal" value="1.2"/>
<pen name="heavier" value="2.4"/>
<pen name="fat" value="3.6"/>
<pen name="ultrafat" value="6"/>
<symbolsize name="normal" value="9"/>
<symbolsize name="large" value="15"/>
<symbolsize name="small" value="6"/>
<symbolsize name="tiny" value="3.3"/>
<arrowsize name="normal" value="15"/>
<arrowsize name="large" value="20"/>
<arrowsize name="small" value="10"/>
<arrowsize name="tiny" value="6"/>
<color name="red" value="1 0 0"/>
<color name="green" value="0 1 0"/>
<color name="blue" value="0 0 1"/>
<color name="yellow" value="1 1 0"/>
<color name="orange" value="1 0.647 0"/>
<color name="gold" value="1 0.843 0"/>
<color name="purple" value="0.627 0.125 0.941"/>
<color name="gray" value="0.745"/>
<color name="brown" value="0.647 0.165 0.165"/>
<color name="navy" value="0 0 0.502"/>
<color name="pink" value="1 0.753 0.796"/>
<color name="seagreen" value="0.18 0.545 0.341"/>
<color name="turquoise" value="0.251 0.878 0.816"/>
<color name="violet" value="0.933 0.51 0.933"/>
<color name="darkblue" value="0 0 0.545"/>
<color name="darkcyan" value="0 0.545 0.545"/>
<color name="darkgray" value="0.663"/>
<color name="darkgreen" value="0 0.392 0"/>
<color name="darkmagenta" value="0.545 0 0.545"/>
<color name="darkorange" value="1 0.549 0"/>
<color name="darkred" value="0.545 0 0"/>
<color name="lightblue" value="0.678 0.847 0.902"/>
<color name="lightcyan" value="0.878 1 1"/>
<color name="lightgray" value="0.827"/>
<color name="lightgreen" value="0.565 0.933 0.565"/>
<color name="lightyellow" value="1 1 0.878"/>
<color name="title" value="0.4 0 0.4"/>
<dashstyle name="dashed" value="[4] 0"/>
<dashstyle name="dotted" value="[1 3] 0"/>
<dashstyle name="dash dotted" value="[4 2 1 2] 0"/>
<dashstyle name="dash dot dotted" value="[4 2 1 2 1 2] 0"/>
<textsize name="normal" value="\normalsize"/>
<textsize name="large" value="\large"/>
<textsize name="small" value="\normalsize"/>
<textsize name="huge" value="\LARGE"/>
<textstretch name="normal" value="2.8"/>
<textstretch name="large" value="2.8"/>
<textstretch name="small" value="2.4"/>
<textstretch name="huge" value="2.8"/>
<textstyle name="normal" begin="\begin{flushleft}" end="\end{flushleft}"/>
<textstyle name="center" begin="\begin{center}" end="\end{center}"/>
<textstyle name="itemize" begin="\begin{flushleft}\begin{itemize}" end="\end{itemize}\end{flushleft}"/>
<textstyle name="item" begin="\begin{flushleft}\begin{itemize}\item{}" end="\end{itemize}\end{flushleft}"/>
<gridsize name="16 pts (~6 mm)" value="16"/>
<gridsize name="32 pts (~12 mm)" value="32"/>
<gridsize name="10 pts (~3.5 mm)" value="10"/>
<gridsize name="20 pts (~7 mm)" value="20"/>
<gridsize name="14 pts (~5 mm)" value="14"/>
<gridsize name="28 pts (~10 mm)" value="28"/>
<gridsize name="56 pts (~20 mm)" value="56"/>
<anglesize name="90 deg" value="90"/>
<anglesize name="60 deg" value="60"/>
<anglesize name="45 deg" value="45"/>
<anglesize name="30 deg" value="30"/>
<anglesize name="22.5 deg" value="22.5"/>
<preamble>
\renewcommand\rmdefault{cmss}
\makeatletter
\leftmargini 1.5em
\leftmargin \leftmargini
\leftmarginii  1.2em
\leftmarginiii 1em
\def\@listI{\leftmargin\leftmargini
            \parsep \z@
	    \partopsep 3pt
	    \topsep \z@
            \itemsep \z@}
\@listI
\def\@listii {\leftmargin\leftmarginii
              \labelwidth\leftmarginii
              \advance\labelwidth-\labelsep
              \topsep    \z@
              \parsep    \z@
              \itemsep   \parsep}
\def\@listiii{\leftmargin\leftmarginiii
              \labelwidth\leftmarginiii
              \advance\labelwidth-\labelsep
              \topsep    \z@
              \parsep    \z@
              \partopsep \z@
              \itemsep   \topsep}
\makeatother
</preamble>
<layout paper="800 600" origin="32 0" frame="736 528" skip="32" crop="no"/>
<titlestyle pos="368 554" size="large" color="title"  halign="center" valign="baseline"/>
<tiling name="falling" angle="-60" step="12" width="3"/>
<tiling name="rising" angle="30" step="12" width="3"/>
</ipestyle>
<ipestyle name="kaisttheme">
<symbol name="Background">
<group>
<image matrix="1 0 0 1 -162.234 308.933" rect="339.004 239.003 396.996 288.997" bitmap="2"/>
<group matrix="0.343668 0 0 0.343668 -51.9093 459.634">
<path fill="0.563 0.727 0.855" fillrule="wind">
76.697 277.771 m
120.493 269.94
192.854 264.827
274.709 264.827 c
356.564 264.827
428.927 269.94
472.718 277.771 c
428.927 285.601
356.564 290.72
274.709 290.72 c
192.854 290.72
120.493 285.601
76.697 277.771 c
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
275.279 299.355 m
294.577 299.355 l
294.577 373.497 l
275.279 373.497 l
275.279 299.355 l
h
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
418.065 373.465 m
361.604 373.465 l
361.669 357.398 l
380.069 357.398 l
380.069 299.214 l
399.603 299.279 l
399.603 357.398 l
418.065 357.398 l
418.065 373.465 l
h
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
249.098 374.512 m
241.957 374.512 l
229.799 374.512 l
222.663 374.512 l
200.923 313.64 l
182.964 337.545 l
209.964 373.497 l
190.668 373.497 l
169.085 344.764 l
169.085 373.497 l
149.792 373.497 l
149.792 299.355 l
169.085 299.355 l
169.085 330.332 l
192.384 299.326 l
195.813 299.326 l
211.677 299.326 l
215.107 299.326 l
235.337 355.983 l
247.498 315.289 l
229.329 315.289 l
229.329 299.226 l
259.475 299.226 l
259.475 299.326 l
271.567 299.326 l
249.098 374.512 l
h
</path>
<path fill="0.065 0.155 0.563" fillrule="wind">
341.955 345.908 m
341.927 345.95 l
319.143 345.95 l
319.143 357.493 l
357.066 357.493 l
357.066 373.56 l
323.335 373.56 l
323.318 373.532 l
311.282 373.532
301.522 363.769
301.522 351.728 c
301.522 339.879
310.971 330.261
322.742 329.946 c
322.76 329.887 l
347.43 329.887 l
347.43 315.289 l
303.776 315.289 l
303.776 299.226 l
342.373 299.226 l
342.399 299.261 l
354.979 299.635
365.065 309.921
365.065 322.573 c
365.065 335.392
354.739 345.781
341.955 345.908 c
</path>
</group>
<text transformations="translations" pos="100 588" stroke="kaist-dark-blue" type="label" valign="top">
CS101</text>
<path stroke="kaist-dark-blue" pen="fat">
0 536 m
736 536 l
</path>
</group>
</symbol>
<color name="kaist-dark-blue" value="0.065 0.155 0.563"/>
<color name="dred" value="0.7 0 0"/>
<layout paper="800 600" origin="32 0" frame="736 528" skip="32" crop="no"/>
<titlestyle pos="736 554" size="large" color="title"  halign="right" valign="baseline"/>
</ipestyle>
<ipestyle name="cs101style">
<preamble>
\newcommand{\dred}[1]{\textcolor{dred}{#1}}
\usepackage{fancyvrb}
\DefineShortVerb[formatcom=\color{darkred}]{\|}
\CustomVerbatimEnvironment{V}{Verbatim}{formatcom=\color{black},commandchars=\\\@\$}
\def\r{$\rightarrow$}
</preamble>
</ipestyle>
<page>
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<view layers="alpha" active="beta"/>
<text layer="alpha" matrix="1 0 0 1 0 -24.8338" pin="h" transformations="translations" pos="0 471.203" stroke="darkblue" type="minipage" width="736" valign="top">\LARGE

\begin{center}
Introduction to Programming\\
CS101
\end{center}

\medskip

\Large
\begin{center}
Fall 2011
\end{center}

\medskip

\begin{center}
Lecture \#4
\end{center}
</text>
<text layer="beta" matrix="1 0 0 1 0 15.3324" pin="h" transformations="translations" pos="0 280.51" stroke="darkblue" type="minipage" width="736" valign="top">Each section has one 3-hour lab per week.  This is \dred{the most important part of the course}!</text>
<text layer="gamma" matrix="1 0 0 1 0 89.9456" pin="h" transformations="translations" pos="0 123.292" stroke="darkblue" type="minipage" width="736" valign="top">Four sections together have a lecture once a week:
\begin{itemize}
\item Sections A, B, C, D: Mondays by YoonJoon Lee;
\item Sections E, F, G, H: Wednesdays by In-Young Ko;
\item Sections I, J, K, L: Fridays by Sukyoung Ryu.
\end{itemize}
</text>
<text layer="delta" matrix="1 0 0 1 0.00000526 -32.075" pin="h" transformations="translations" pos="0 95.7597" stroke="darkblue" type="minipage" width="736" valign="top">You must regularly check the course announcements on \dred{http://cs101.kaist.ac.kr}</text>
</page>
<page title="Functions" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<view layers="alpha beta gamma delta" active="delta"/>
<text layer="gamma" matrix="1 0 0 1 0 -295.988" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">In Python, functions also take \dred{arguments} and return a \dred{result}:

\begin{V}
def to_radians(\dred@deg$):
  \dred@return$ (\dred@deg$ / 180.0) * math.pi
\end{V}
</text>
<text layer="alpha" matrix="1 0 0 1 0 141.753" pin="h" transformations="translations" pos="0 385.193" stroke="darkblue" type="minipage" width="736" valign="top">The name \dred{function} comes from mathematics.  A function is a mapping from one set to another set:
\begin{align*}
f :~&amp; \mathbb{R} \rightarrow \mathbb{R} \\
&amp; x \mapsto \pi \times \frac{x}{180.0}
\end{align*}
</text>
<text layer="beta" matrix="1 0 0 1 0 303.12" pin="h" transformations="translations" pos="0 13.4246" stroke="darkblue" type="minipage" width="736" valign="top">Here, $x$ is the \dred{argument} of the function, $f(x)$ is the \dred{result} of the function.</text>
<text layer="delta" matrix="1 0 0 1 0 13.373" pin="h" transformations="translations" pos="0 90.7559" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
&gt;&gt;&gt; a = to_radians(90)
&gt;&gt;&gt; print a
1.5707963267948966
\end{V}</text>
</page>
<page title="Useful functions" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Python comes with many built-in functions.</text>
<text layer="beta" matrix="1 0 0 1 0 5.65445" pin="h" transformations="translations" pos="0 471.203" stroke="darkblue" type="minipage" width="736" valign="top">\dred{Type conversion functions} convert from one type to another type:

\begin{V}
&gt;&gt;&gt; int(&quot;32&quot;)
32
&gt;&gt;&gt; int(17.3)
17
&gt;&gt;&gt; float(17)
17.0
&gt;&gt;&gt; float(&quot;3.1415&quot;)
3.1415
&gt;&gt;&gt; str(17) + &quot; &quot; + str(3.1415)
&apos;17 3.1415&apos;
&gt;&gt;&gt; complex(17)
(17 + 0j)
\end{V}
</text>
</page>
<page title="Math functions" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">To use math functions, we need to tell Python that we want to use the |math| module:

\begin{V}
import math
degrees = 45
radians = degrees / 360.0 * 2 * math.pi
print math.sin(radians)
print math.sqrt(2) / 2
\end{V}
</text>
<text layer="beta" matrix="1 0 0 1 0 52.2723" pin="h" transformations="translations" pos="0 185.897" stroke="darkblue" type="minipage" width="736" valign="top">When using math functions often, we can use shorter names:

\begin{V}
import math
sin = math.sin
pi = math.pi
radians = degrees / 360.0 * 2 * pi
print sin(radians)
\end{V}
</text>
</page>
<page title="Defining functions with parameters" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<view layers="alpha beta gamma delta" active="delta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">The function definition uses \dred{names} for the arguments of the function.  These names are called \dred{parameters}:

\begin{V}
def compute_interest(\dred@amount$, \dred@rate$, \dred@years$):
\end{V}</text>
<text layer="beta" pin="h" transformations="translations" pos="0 386.744" stroke="darkblue" type="minipage" width="736" valign="top">Inside the function, the parameter is just a name:

\begin{V}
  value = amount * (1 + rate/100.0) ** years
\end{V}
</text>
<text layer="gamma" pin="h" transformations="translations" pos="0 282.837" stroke="darkblue" type="minipage" width="736" valign="top">When we have computed the result of the function, we \dred{return} it from the function.  The function ends at this point, and the result object is given back:

\begin{V}
  return value
\end{V}
</text>
<text layer="delta" pin="h" transformations="translations" pos="0 114.304" stroke="darkblue" type="minipage" width="736" valign="top">We can now call the function with different argument values:
\begin{V}
&gt;&gt;&gt; s1 = compute_interest(200, 7, 1)
&gt;&gt;&gt; s2 = compute_interest(500, 1, 20)
\end{V}
</text>
</page>
<page title="Converting to black-and-white" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" halign="center" valign="top">What is the light intensity (\dred{luminance}) of pixel |(r,g,b)|?</text>
<path layer="beta" fill="red">
128 448 m
128 320 l
256 320 l
256 448 l
h
</path>
<path fill="green">
320 448 m
320 320 l
448 320 l
448 448 l
h
</path>
<path fill="blue">
512 448 m
512 320 l
640 320 l
640 448 l
h
</path>
<path fill="white">
128 384 m
128 384 l
128 384 l
128 384 l
h
</path>
<text matrix="1 0 0 1 48 0" transformations="translations" pos="144 464" stroke="darkblue" type="label" halign="center" valign="center">(255, 0, 0)</text>
<text transformations="translations" pos="384 464" stroke="darkblue" type="label" halign="center" valign="center">(0, 255, 0)</text>
<text transformations="translations" pos="576 464" stroke="darkblue" type="label" halign="center" valign="center">(0, 0, 255)</text>
<text layer="gamma" matrix="1 0 0 1 0 -144" pin="h" transformations="translations" pos="0 404.104" stroke="darkblue" type="minipage" width="736" halign="center" valign="top">A good formula is:

\begin{V}
def luminance(p):
  r, g, b = p
  return int(0.299 * r + 0.587 * g + 0.114 * b) 
\end{V}
</text>
</page>
<page title="More than one return in a function" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">Compute the absolute value (like builtin function |abs|):

\begin{V}
def absolute(x):
  if x &lt; 0:
    return -x
  else:
    return x
\end{V}</text>
<text layer="beta" matrix="1 0 0 1 0 -253.572" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">The same function can be written like this:

\begin{V}
def absolute(x):
  if x &lt; 0:
    return -x
  return x
\end{V}</text>
<text layer="gamma" transformations="translations" pos="320 224" stroke="darkred" type="minipage" width="416" valign="top">But \dred{not} like this:

\begin{V}
def absolute(x):
  if x &lt; 0: 
    return -x
  if x &gt; 0:
    return x
\end{V}
</text>
</page>
<page title="Returning a boolean" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">A function that tests a condition and returns either |True| or |False| is often called a \dred{predicate}:

\begin{V}
# is integer a divisible by b?
def is_divisible(a, b):
  if a % b == 0:
    return True
  else:
    return False
\end{V}

</text>
<text layer="beta" pin="h" transformations="translations" pos="0 225.57" stroke="darkblue" type="minipage" width="736" valign="top">A predicate (function) can be used directly in an |if| or |while| statement:

\begin{V}
if is_divisible(x, y):
  print &apos;x is divisible by y&apos;
\end{V}
</text>
<text layer="gamma" matrix="1 0 0 1 64 0" transformations="translations" pos="320 384" stroke="darkblue" type="minipage" width="352" valign="top">Easier:
\begin{V}
def is_divisible(a, b):
  return a % b == 0
\end{V}</text>
</page>
<page title="Functions without results" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" matrix="1 0 0 1 0 476.077" pin="h" transformations="translations" pos="0 51.0666" stroke="darkblue" type="minipage" width="736" valign="top">We have seen many functions that do not use |return|:

\begin{V}
def turn_right():
  for i in range(3):
    hubo.turn_left()
\end{V}
</text>
<text layer="beta" matrix="1 0 0 1 0 287.073" pin="h" transformations="translations" pos="0 51.0666" stroke="darkblue" type="minipage" width="736" valign="top">In fact, a function that does not call |return| automatically returns |None|:

\begin{V}
&gt;&gt;&gt; s = turn_right()
&gt;&gt;&gt; print s
None
\end{V}</text>
</page>
<page title="Calling functions" section="">
<layer name="beta"/>
<layer name="gamma"/>
<view layers="beta" active="beta"/>
<view layers="beta gamma" active="gamma"/>
<text layer="beta" matrix="1 0 0 1 0 57.9495" pin="h" transformations="translations" pos="0 471.203" stroke="darkblue" type="minipage" width="736" valign="top">When a function is called, the \dred{arguments} of the function call are assigned to the \dred{parameters}:

\begin{V}
def print_twice(\dred@text$):
  print text
  print text
\end{V}
</text>
<text matrix="1 0 0 1 0 24.0713" transformations="translations" pos="461.569 379.421" stroke="darkred" type="label" valign="baseline">Parameter</text>
<path matrix="1 0 0 1 0 24.0713" stroke="darkred" arrow="normal/normal">
452.566 388.424 m
379.897 382.637
324.592 368.489
276.36 364.63
267.357 400 s
</path>
<text layer="gamma" matrix="1 0 0 1 0 6.24071" pin="h" transformations="translations" pos="0 296.47" stroke="darkblue" type="minipage" width="736" valign="top">The number of arguments in the function call must be the same as the number of parameters.

\begin{V}
&gt;&gt;&gt; print_twice(&quot;I love CS101&quot;)
I love CS101
I love CS101
&gt;&gt;&gt; print_twice(math.pi)
3.14159265359
3.14159265359
\end{V}
</text>
</page>
<page title="Hubo&apos;s family" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">We can now write a |turn_right| function that will work for any robot, not just for Hubo:

\begin{V}
def turn_right(\dred@robot$):
  for i in range(3):
    \dred@robot$.turn_left()

ami = Robot(&quot;yellow&quot;)
hubo = Robot(&quot;blue&quot;)
turn_right(ami)
turn_right(hubo)
\end{V}
</text>
<text layer="beta" matrix="1 0 0 1 0 -29.4205" pin="h" transformations="translations" pos="0 185.897" stroke="darkblue" type="minipage" width="736" valign="top">Remember: A \dred{parameter} is a \dred{name} for an object.  The name can only be used \dred{inside} the function.</text>
</page>
<page title="Harvesting again" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<layer name="delta"/>
<layer name="epsilon"/>
<layer name="zeta"/>
<view layers="alpha beta" active="alpha"/>
<view layers="alpha gamma" active="gamma"/>
<view layers="alpha gamma delta" active="delta"/>
<view layers="alpha gamma delta epsilon" active="epsilon"/>
<view layers="alpha gamma zeta" active="zeta"/>
<image layer="alpha" rect="142.278 38.2782 593.722 489.722" bitmap="1"/>
<path layer="beta" stroke="darkmagenta" arrow="normal/normal">
357.102 121.594 m
520.977 284.662 l
358.716 454.188 l
189.998 288.698 l
353.066 128.052 l
355.487 186.983 l
454.781 286.276 l
360.331 387.185 l
257.001 286.276 l
354.68 191.019 l
357.102 249.95 l
391.814 289.506 l
356.295 322.603 l
322.39 286.276 l
351.451 256.408 l
</path>
<path layer="gamma" stroke="darkmagenta" arrow="normal/normal">
359.524 120.787 m
519.362 283.047 l
</path>
<path layer="delta" stroke="darkmagenta" arrow="normal/normal">
355.487 189.405 m
455.588 285.469 l
</path>
<path layer="gamma" fill="white">
467.697 207.972 m
467.697 165.187 l
697.768 165.187 l
697.768 207.972 l
h
</path>
<text transformations="translations" pos="470.119 179.717" stroke="darkmagenta" type="label" valign="baseline">\texttt{stairs(hubo, 5)}</text>
<path layer="delta" fill="white">
514.519 359.738 m
514.519 324.218 l
742.168 324.218 l
742.168 359.738 l
h
</path>
<text transformations="translations" pos="517.748 333.905" stroke="darkmagenta" type="label" valign="baseline">\texttt{stairs(hubo, 3)}</text>
<path layer="epsilon" stroke="darkmagenta" arrow="normal/normal">
356.295 253.179 m
391.007 286.276 l
</path>
<path fill="white">
500.795 443.693 m
500.795 410.595 l
734.902 410.595 l
734.902 443.693 l
h
</path>
<text transformations="translations" pos="506.446 418.668" stroke="darkmagenta" type="label" valign="baseline">\texttt{stairs(hubo, 1)}</text>
<path layer="zeta" stroke="darkmagenta" arrow="normal/normal">
520.17 285.469 m
357.102 450.151 l
</path>
<path stroke="darkmagenta" arrow="normal/normal">
354.68 451.766 m
194.034 286.276 l
</path>
<path stroke="darkmagenta" arrow="normal/normal">
190.805 284.662 m
351.451 125.631 l
</path>
<group>
<path fill="white">
446.708 429.162 m
446.708 391.221 l
681.623 391.221 l
681.623 429.162 l
h
</path>
<text matrix="1 0 0 1 -73.4612 8.87992" transformations="translations" pos="527.435 395.257" stroke="darkmagenta" type="label" valign="baseline">\texttt{stairs(hubo, 5)}</text>
</group>
<group matrix="1 0 0 1 -435.117 -1.6143">
<path fill="white">
446.708 429.162 m
446.708 391.221 l
681.623 391.221 l
681.623 429.162 l
h
</path>
<text matrix="1 0 0 1 -73.4612 8.87992" transformations="translations" pos="527.435 395.257" stroke="darkmagenta" type="label" valign="baseline">\texttt{stairs(hubo, 5)}</text>
</group>
<group matrix="1 0 0 1 -419.778 -245.408">
<path fill="white">
446.708 429.162 m
446.708 391.221 l
681.623 391.221 l
681.623 429.162 l
h
</path>
<text matrix="1 0 0 1 -73.4612 8.87992" transformations="translations" pos="527.435 395.257" stroke="darkmagenta" type="label" valign="baseline">\texttt{stairs(hubo, 5)}</text>
</group>
</page>
<page>
<layer name="alpha"/>
<view layers="alpha" active="alpha"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkmagenta" type="minipage" width="736" valign="top">\begin{V}
def stairs(robot, n):
  for i in range(n):
    robot.pick_beeper()
    robot.move()
    turn_right(robot)
    robot.move()
    robot.turn_left()

def diamond(robot, n):
  for i in range(4):
    stairs(robot, n)
    robot.turn_left()
\end{V}</text>
<text transformations="translations" pos="384 512" stroke="darkmagenta" type="minipage" width="352" valign="top">\begin{V}
def harvest_all(robot):
  for i in range(3):
    n = 5 - 2 * i
    diamond(robot, n)
    hubo.move()
    hubo.move()
\end{V}
</text>
</page>
<page title="Converting to black and white, again">
<layer name="alpha"/>
<view layers="alpha" active="alpha"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">\begin{V}
white = (255, 255, 255)
black = (0, 0, 0)

def blackwhite(img, threshold):
  w, h = img.size()
  for y in range(h):
    for x in range(w):
      v = luminance(img.get(x, y))
      if v &gt; threshold:
        img.set(x, y, white)
      else:
        img.set(x, y, black)

pict = load_picture(&quot;../photos/yuna1.jpg&quot;)
blackwhite(pict, 100)
pict.show()
\end{V}</text>
</page>
<page title="Returning more than one value" section="">
<layer name="alpha"/>
<layer name="beta"/>
<layer name="gamma"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<view layers="alpha beta gamma" active="gamma"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">A function can only return one value.</text>
<text layer="beta" pin="h" transformations="translations" pos="0 471.203" stroke="darkblue" type="minipage" width="736" valign="top">But this value can be a tuple, and functions can return arbitrarily many values by returning them as a tuple:

\begin{V}
def student():
  name = &quot;Hong, Gildong&quot;
  id = 20101234
  return name, id
\end{V}
</text>
<text layer="gamma" pin="h" transformations="translations" pos="0 231.846" stroke="darkblue" type="minipage" width="736" valign="top">Often function results are unpacked immediately:

\begin{V}
name, id = student()
\end{V}
</text>
</page>
<page title="Keyboard input" section="">
<layer name="alpha"/>
<layer name="beta"/>
<view layers="alpha" active="alpha"/>
<view layers="alpha beta" active="beta"/>
<text layer="alpha" pin="h" transformations="translations" pos="0 528" stroke="darkblue" type="minipage" width="736" valign="top">The |raw_input| function waits for the user to enter a string on the keyboard.  When the user presses the Enter key, the whole string is returned:

\begin{V}
name = raw_input(&quot;What is your name? &quot;)
print &quot;Welcome to CS101, &quot; + name
\end{V}
</text>
<text layer="beta" pin="h" transformations="translations" pos="0 319.793" stroke="darkblue" type="minipage" width="736" valign="top">If we need a number, we should convert the string:

\begin{V}
raw_n = raw_input(&quot;Enter a positive integer&gt; &quot;)
n = int(raw_n)
for i in range(n):
  print &quot;*&quot; * i
\end{V}
</text>
</page>
</ipe>
